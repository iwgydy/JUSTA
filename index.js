//-------------------------------------------------------------
// server.js (‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
//-------------------------------------------------------------

const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const login = require('ryuu-fca-api'); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
const chalk = require('chalk');
const figlet = require('figlet');
const fs = require('fs');
const path = require('path');

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
    cors: {
        origin: "*", // ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        methods: ["GET", "POST"]
    }
});
const PORT = 3005;

let botCount = 0;
global.botSessions = {}; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å let ‡πÄ‡∏õ‡πá‡∏ô global ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
const commands = {};
const commandDescriptions = [];
let commandUsage = {}; // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á

const botsDir = path.join(__dirname, 'bots');
const dataDir = path.join(__dirname, 'data'); // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå bots ‡πÅ‡∏•‡∏∞ data ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if (!fs.existsSync(botsDir)) {
    fs.mkdirSync(botsDir);
}
if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir);
}

// ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå commandUsage.json
const commandUsageFile = path.join(dataDir, 'commandUsage.json');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î commandUsage ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
function loadCommandUsage() {
    if (fs.existsSync(commandUsageFile)) {
        try {
            const data = fs.readFileSync(commandUsageFile, 'utf-8');
            commandUsage = JSON.parse(data);
            console.log(chalk.green('‚úÖ ‡πÇ‡∏´‡∏•‡∏î commandUsage ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'));
        } catch (err) {
            console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î commandUsage ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: ${err.message}`));
            commandUsage = {};
        }
    } else {
        commandUsage = {};
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å commandUsage ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
function saveCommandUsage() {
    try {
        fs.writeFileSync(commandUsageFile, JSON.stringify(commandUsage, null, 4), 'utf-8');
        console.log(chalk.green('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å commandUsage ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'));
    } catch (err) {
        console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å commandUsage ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: ${err.message}`));
    }
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå commands
const commandsPath = path.join(__dirname, 'commands');
if (fs.existsSync(commandsPath)) {
    fs.readdirSync(commandsPath).forEach((file) => {
        if (file.endsWith(".js")) {
            const command = require(`./commands/${file}`);
            if (command.config && command.config.name) {
                commands[command.config.name.toLowerCase()] = command;
                commandDescriptions.push({
                    name: command.config.name,
                    description: command.config.description || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢",
                });
                // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
                commandUsage[command.config.name.toLowerCase()] = commandUsage[command.config.name.toLowerCase()] || 0;
                console.log(`üì¶ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${command.config.name}`);
            }
        }
    });
}

// ‡πÇ‡∏´‡∏•‡∏î commandUsage ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
loadCommandUsage();

// ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå events
const events = {};
const eventsPath = path.join(__dirname, 'events');
if (fs.existsSync(eventsPath)) {
    fs.readdirSync(eventsPath).forEach((file) => {
        if (file.endsWith(".js")) {
            const event = require(`./events/${file}`);
            if (event.config && event.config.eventType) {
                event.config.eventType.forEach((type) => {
                    if (!events[type]) events[type] = [];
                    events[type].push(event);
                });
                console.log(`üîî ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå: ${file}`);
            }
        }
    });
}

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™ 6 ‡∏´‡∏•‡∏±‡∏Å
function generate6DigitCode() {
    return Math.floor(100000 + Math.random() * 900000).toString();
}

// --------------------- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° ‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î ‡∏ö‡∏≠‡∏ó: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡πÑ‡∏ó‡∏¢/‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ----------------------

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÄ‡∏û‡∏¥‡πà‡∏° case 'paused')
function translateStatus(status) {
    switch(status) {
        case 'connecting':
            return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠';
        case 'online':
            return '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå';
        case 'active':
            return '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô';
        case 'connection_failed':
            return '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
        case 'offline':
            return '‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå';
        case 'paused':
            return '‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß';
        default:
            return status;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÄ‡∏û‡∏¥‡πà‡∏° case 'paused')
function getStatusClass(status) {
    switch(status) {
        case 'connecting':
            return 'status-connecting';
        case 'online':
            return 'status-online';
        case 'active':
            return 'status-active';
        case 'connection_failed':
            return 'status-connection-failed';
        case 'offline':
            return 'status-offline';
        case 'paused':
            return 'status-paused';
        default:
            return 'status-unknown';
    }
}

// --------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ö‡∏≠‡∏ó + ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î ----------------------

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏õ‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
let websitePing = 0;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
function generateBotData() {
    const totalBots = Object.keys(botSessions).length;
    const onlineBots = Object.values(botSessions).filter(bot => bot.status === 'online' || bot.status === 'active').length;
    const activeBots = Object.values(botSessions).filter(bot => bot.status === 'active').length;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà
    const botRows = Object.entries(botSessions).map(([token, bot]) => {
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î label ‡∏ö‡∏ô‡∏õ‡∏∏‡πà‡∏° Toggle ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const toggleButtonLabel = (bot.status === 'online' || bot.status === 'active')
            ? '‡∏õ‡∏¥‡∏î'
            : '‡πÄ‡∏õ‡∏¥‡∏î';

        return `
            <tr id="bot-${encodeURIComponent(token)}">
                <td>
                    <i class="fas fa-robot me-2" style="color: var(--primary-color);"></i>
                    <span class="bot-name">${bot.name}</span>
                </td>
                <td>
                    <span class="${getStatusClass(bot.status)}">
                        <i class="fas fa-circle"></i>
                        ${translateStatus(bot.status)}
                    </span>
                </td>
                <td>
                    <span class="runtime" data-start-time="${bot.startTime}">
                        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì...
                    </span>
                </td>
                <td>
                    <span class="ping">${bot.ping || 'N/A'} ms</span>
                </td>
                <td>
                    <!-- ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö/‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó/‡∏õ‡∏¥‡∏î-‡πÄ‡∏õ‡∏¥‡∏î -->
                    <button class="btn btn-warning btn-sm edit-btn" data-token="${encodeURIComponent(token)}">
                        <i class="fas fa-edit"></i> ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                    </button>
                    <button class="btn btn-danger btn-sm delete-btn" data-token="${encodeURIComponent(token)}">
                        <i class="fas fa-trash-alt"></i> ‡∏•‡∏ö
                    </button>
                    <button class="btn btn-secondary btn-sm restart-btn" data-token="${encodeURIComponent(token)}">
                        <i class="fas fa-sync-alt"></i> ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó
                    </button>
                    <!-- ‡∏õ‡∏∏‡πà‡∏° ‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î ‡∏ö‡∏≠‡∏ó -->
                    <button class="btn btn-info btn-sm toggle-btn" data-token="${encodeURIComponent(token)}">
                        <i class="fas fa-power-off"></i> ${toggleButtonLabel}
                    </button>
                </td>
            </tr>
        `;
    }).join('') || `
        <tr>
            <td colspan="5" class="text-center">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</td>
        </tr>
    `;

    return { 
        totalBots, 
        onlineBots, 
        activeBots, 
        botRows, 
        commandDescriptions, 
        websitePing 
    };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
function generateCommandData() {
    const commandsData = Object.entries(commandUsage).map(([name, count]) => {
        const description = commandDescriptions.find(cmd => cmd.name.toLowerCase() === name)?.description || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢";
        return `
            <tr>
                <td>${name}</td>
                <td>${count}</td>
                <td>${description}</td>
            </tr>
        `;
    }).join('') || `
        <tr>
            <td colspan="3" class="text-center">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</td>
        </tr>
    `;

    return commandsData;
}

// --------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏≠‡∏ó‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå ----------------------

function loadBotsFromFiles() {
    fs.readdirSync(botsDir).forEach(file => {
        if (file.endsWith('.json')) {
            const filePath = path.join(botsDir, file);
            try {
                const botData = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
                const { appState, token, name, startTime, password, adminID, prefix } = botData;
                startBot(appState, token, name, prefix, startTime, password, adminID, false).catch(err => {
                    console.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå: ${filePath}, error=${err.message}`);
                });
            } catch (err) {
                console.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏≠‡∏ó: ${filePath}, error=${err.message}`);
            }
        }
    });
}

// --------------------- Route ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏ï‡πà‡∏≤‡∏á ‡πÜ ----------------------

// ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏´‡∏•‡∏±‡∏Å
app.get("/", (req, res) => {
    const data = generateBotData();
    res.send(`
        <!DOCTYPE html>
        <html lang="th">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏´‡∏•‡∏±‡∏Å | ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
            <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@400;600&family=Roboto:wght@400;500&family=Press+Start+2P&display=swap" rel="stylesheet">
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
            <style>
                /* ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á */
                body {
                    background: url('https://i.postimg.cc/WbGnSFc9/snapedit-1734599436384.png') no-repeat center center fixed;
                    background-size: cover;
                    color: #ffffff;
                    font-family: 'Roboto', sans-serif;
                    position: relative;
                    overflow-x: hidden;
                }
                html, body {
                    height: 100%;
                    margin: 0;
                    padding: 0;
                }
                body {
                    display: flex;
                    flex-direction: column;
                    min-height: 100vh;
                }
                main.flex-grow-1 {
                    flex: 1;
                }
                .overlay {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0, 0, 0, 0.7);
                    z-index: -1;
                }
                .navbar {
                    background: rgba(13, 110, 253, 0.9) !important;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                }
                .navbar-brand {
                    font-family: 'Kanit', sans-serif;
                    font-weight: 600;
                    color: #ffffff !important;
                }
                .navbar-nav .nav-link {
                    color: #ffffff !important;
                    transition: color 0.3s ease;
                }
                .navbar-nav .nav-link:hover {
                    color: #ffc107 !important;
                }
                .stats-card {
                    background: rgba(255, 255, 255, 0.1);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                    border-radius: 12px;
                    padding: 20px;
                    text-align: center;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
                    transition: transform 0.3s ease, box-shadow 0.3s ease;
                }
                .stats-card:hover {
                    transform: translateY(-5px);
                    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.5);
                }
                .stats-number {
                    font-size: 2.5rem;
                    font-weight: 700;
                    margin: 10px 0;
                    color: #ffc107;
                }
                .stats-label {
                    font-size: 1rem;
                    color: #ffffff;
                }
                .glass-card {
                    background: rgba(255, 255, 255, 0.1);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                    border-radius: 16px;
                    padding: 24px;
                    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
                    transition: transform 0.3s ease, box-shadow 0.3s ease;
                }
                .glass-card:hover {
                    transform: translateY(-5px);
                    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.5);
                }
                .bot-table, .command-table {
                    width: 100%;
                    border-collapse: collapse;
                    margin-top: 20px;
                }
                .bot-table th, .bot-table td,
                .command-table th, .command-table td {
                    padding: 12px 15px;
                    text-align: left;
                }
                .bot-table th, .command-table th {
                    background-color: rgba(13, 110, 253, 0.9);
                    color: #fff;
                    font-weight: 600;
                }
                .bot-table tr:nth-child(even),
                .command-table tr:nth-child(even) {
                    background-color: rgba(255, 255, 255, 0.1);
                }
                .status-online {
                    background: #198754;
                    color: #ffffff;
                    padding: 5px 10px;
                    border-radius: 20px;
                    font-size: 0.9rem;
                    display: inline-flex;
                    align-items: center;
                    gap: 6px;
                }
                .status-active {
                    background: #20c997;
                    color: #ffffff;
                    padding: 5px 10px;
                    border-radius: 20px;
                    font-size: 0.9rem;
                    display: inline-flex;
                    align-items: center;
                    gap: 6px;
                }
                .status-connecting {
                    background: #ffc107;
                    color: #212529;
                    padding: 5px 10px;
                    border-radius: 20px;
                    font-size: 0.9rem;
                    display: inline-flex;
                    align-items: center;
                    gap: 6px;
                }
                .status-connection-failed {
                    background: #dc3545;
                    color: #ffffff;
                    padding: 5px 10px;
                    border-radius: 20px;
                    font-size: 0.9rem;
                    display: inline-flex;
                    align-items: center;
                    gap: 6px;
                }
                .status-offline {
                    background: #6c757d;
                    color: #ffffff;
                    padding: 5px 10px;
                    border-radius: 20px;
                    font-size: 0.9rem;
                    display: inline-flex;
                    align-items: center;
                    gap: 6px;
                }
                /* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ paused */
                .status-paused {
                    background: #0d6efd; /* ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏° bootstrap */
                    color: #ffffff;
                    padding: 5px 10px;
                    border-radius: 20px;
                    font-size: 0.9rem;
                    display: inline-flex;
                    align-items: center;
                    gap: 6px;
                }
                .footer {
                    background: rgba(13, 110, 253, 0.9);
                    border-top: 2px solid rgba(255, 193, 7, 0.5);
                    padding: 20px 0;
                    font-size: 0.9rem;
                    color: #ffffff;
                }
                .btn-primary {
                    background: #ffc107;
                    border: none;
                    padding: 10px 20px;
                    font-size: 1rem;
                    border-radius: 8px;
                    transition: background 0.3s ease, transform 0.2s ease;
                    color: #212529;
                    font-weight: 600;
                }
                .btn-primary:hover {
                    background: #e0a800;
                    transform: translateY(-2px);
                }
                .btn-warning, .btn-danger, .btn-secondary, .btn-info {
                    transition: transform 0.2s ease;
                }
                .btn-warning:hover, .btn-danger:hover, .btn-secondary:hover, .btn-info:hover {
                    transform: scale(1.05);
                }
                .toast-container {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 1055;
                }
                .bot-name {
                    font-family: 'Press Start 2P', cursive;
                    color: #ff5722;
                    font-size: 1.1rem;
                }
                .runtime {
                    font-weight: 500;
                    color: #ffc107;
                }
                .ping {
                    font-weight: 500;
                    color: #198754;
                }
                @media (max-width: 768px) {
                    .stats-card {
                        margin-bottom: 20px;
                    }
                    .glass-card {
                        margin-bottom: 20px;
                    }
                    .bot-table th, .bot-table td,
                    .command-table th, .command-table td {
                        padding: 8px 10px;
                    }
                }
                .animate-float {
                    animation: float 3s ease-in-out infinite;
                }
                @keyframes float {
                    0%, 100% { transform: translateY(0); }
                    50% { transform: translateY(-10px); }
                }
            </style>
        </head>
        <body>
            <div class="overlay"></div>
            <nav class="navbar navbar-expand-lg navbar-dark mb-4">
                <div class="container">
                    <a class="navbar-brand d-flex align-items-center" href="/">
                        <i class="fas fa-robot fa-lg me-2 animate-float" style="color: #ffffff;"></i>
                        ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó
                    </a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarNav">
                        <ul class="navbar-nav ms-auto">
                            <li class="nav-item">
                                <a class="nav-link" href="/start"><i class="fas fa-plus-circle me-1"></i> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/bots"><i class="fas fa-list me-1"></i> ‡∏î‡∏π‡∏ö‡∏≠‡∏ó‡∏£‡∏±‡∏ô</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/commands"><i class="fas fa-terminal me-1"></i> ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/how-to-make-bot"><i class="fas fa-video me-1"></i> ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </nav>

            <main class="flex-grow-1">
                <div class="container">
                    <div class="row mb-4">
                        <div class="col-md-3 col-sm-6 mb-3">
                            <div class="stats-card">
                                <i class="fas fa-robot fa-2x mb-3" style="color: #ffc107;"></i>
                                <div class="stats-number" id="totalBots">${data.totalBots}</div>
                                <div class="stats-label">‡∏ö‡∏≠‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
                            </div>
                        </div>
                        <div class="col-md-3 col-sm-6 mb-3">
                            <div class="stats-card">
                                <i class="fas fa-signal fa-2x mb-3" style="color: #198754;"></i>
                                <div class="stats-number" id="onlineBots">${data.onlineBots}</div>
                                <div class="stats-label">‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</div>
                            </div>
                        </div>
                        <div class="col-md-3 col-sm-6 mb-3">
                            <div class="stats-card">
                                <i class="fas fa-clock fa-2x mb-3" style="color: #ffc107;"></i>
                                <div class="stats-number" id="activeBots">${data.activeBots}</div>
                                <div class="stats-label">‡∏ö‡∏≠‡∏ó‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</div>
                            </div>
                        </div>
                        <div class="col-md-3 col-sm-6 mb-3">
                            <div class="stats-card">
                                <i class="fas fa-tachometer-alt fa-2x mb-3" style="color: #198754;"></i>
                                <div class="stats-number" id="websitePing">${data.websitePing} ms</div>
                                <div class="stats-label">Ping ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-12">
                            <div class="glass-card">
                                <h5 class="mb-4">
                                    <i class="fas fa-robot me-2" style="color: #ffc107;"></i>
                                    ‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                                </h5>
                                <div class="table-responsive">
                                    <table class="table bot-table">
                                        <thead>
                                            <tr>
                                                <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó</th>
                                                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                                                <th>‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô</th>
                                                <th>‡∏õ‡∏¥‡∏á</th>
                                                <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                                            </tr>
                                        </thead>
                                        <tbody id="botTableBody">
                                            ${data.botRows}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>

            <footer class="footer text-center">
                <div class="container">
                    <p class="mb-0">¬© ${new Date().getFullYear()} ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó | ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ‚ù§Ô∏è</p>
                </div>
            </footer>

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
            <script src="/socket.io/socket.io.js"></script>
            <script>
                const socket = io();

                // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô
                function updateRuntime() {
                    const runtimeElements = document.querySelectorAll('.runtime');
                    const now = Date.now();

                    runtimeElements.forEach(el => {
                        const startTime = parseInt(el.getAttribute('data-start-time'));
                        if (!startTime) return;

                        const elapsed = now - startTime;
                        const seconds = Math.floor((elapsed / 1000) % 60);
                        const minutes = Math.floor((elapsed / (1000 * 60)) % 60);
                        const hours = Math.floor((elapsed / (1000 * 60 * 60)) % 24);
                        const days = Math.floor(elapsed / (1000 * 60 * 60 * 24));

                        el.textContent = \`\${days} ‡∏ß‡∏±‡∏ô \${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á \${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ \${seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\`;
                    });
                }

                function sendPing() {
                    const timestamp = Date.now();
                    socket.emit('ping', timestamp);
                }
                setInterval(sendPing, 5000);
                sendPing(); // ping ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤

                function showToast(message, type = 'info') {
                    const toastContainer = document.querySelector('.toast-container');
                    if (!toastContainer) return;
                    const toastEl = document.createElement('div');
                    toastEl.className = \`toast align-items-center text-bg-\${type} border-0\`;
                    toastEl.setAttribute('role', 'alert');
                    toastEl.setAttribute('aria-live', 'assertive');
                    toastEl.setAttribute('aria-atomic', 'true');
                    toastEl.innerHTML = \`
                        <div class="d-flex">
                            <div class="toast-body">
                                \${message}
                            </div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                    \`;
                    toastContainer.appendChild(toastEl);
                    const toast = new bootstrap.Toast(toastEl);
                    toast.show();
                    toastEl.addEventListener('hidden.bs.toast', () => {
                        toastEl.remove();
                    });
                }

                // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
                socket.on('updateBots', (data) => {
                    document.getElementById('totalBots').textContent = data.totalBots;
                    document.getElementById('onlineBots').textContent = data.onlineBots;
                    document.getElementById('activeBots').textContent = data.activeBots;
                    document.getElementById('websitePing').textContent = data.websitePing + ' ms';

                    const botTableBody = document.getElementById('botTableBody');
                    if (botTableBody) {
                        botTableBody.innerHTML = data.botRows;
                    }
                    updateRuntime();
                });

                socket.on('botDeleted', (botName) => {
                    showToast(\`‡∏ö‡∏≠‡∏ó "\${botName}" ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\`, 'success');
                });
                socket.on('botOffline', (botName) => {
                    showToast(\`‡∏ö‡∏≠‡∏ó "\${botName}" ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå\`, 'warning');
                });
                socket.on('botRestarted', (botName) => {
                    showToast(\`‡∏ö‡∏≠‡∏ó "\${botName}" ‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\`, 'success');
                });

                setInterval(updateRuntime, 1000);
                document.addEventListener('DOMContentLoaded', updateRuntime);

                // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏î‡πâ‡∏ß‡∏¢ Event Delegation
                document.addEventListener('click', function(event) {
                    // ‡∏•‡∏ö‡∏ö‡∏≠‡∏ó
                    if (event.target.closest('.delete-btn')) {
                        const token = decodeURIComponent(event.target.closest('.delete-btn').getAttribute('data-token'));
                        const deleteCode = prompt('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô 6 ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏≠‡∏ó:');
                        if (deleteCode) {
                            fetch('/delete', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ token, code: deleteCode })
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    showToast('‡∏•‡∏ö‡∏ö‡∏≠‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
                                } else {
                                    showToast(data.message || '‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', 'danger');
                                }
                            })
                            .catch(err => {
                                console.error(err);
                                showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏≠‡∏ó', 'danger');
                            });
                        }
                    }

                    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô
                    if (event.target.closest('.edit-btn')) {
                        const token = decodeURIComponent(event.target.closest('.edit-btn').getAttribute('data-token'));
                        const editCode = prompt('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô 6 ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô:');
                        if (editCode) {
                            const newToken = prompt('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà (AppState ‡πÉ‡∏ô‡∏£‡∏π‡∏õ JSON):');
                            if (newToken) {
                                fetch('/edit', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({ token, code: editCode, newToken })
                                })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        showToast('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
                                    } else {
                                        showToast(data.message || '‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', 'danger');
                                    }
                                })
                                .catch(err => {
                                    console.error(err);
                                    showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô', 'danger');
                                });
                            }
                        }
                    }

                    // ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó
                    if (event.target.closest('.restart-btn')) {
                        const token = decodeURIComponent(event.target.closest('.restart-btn').getAttribute('data-token'));
                        const restartCode = prompt('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô 6 ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó:');
                        if (restartCode) {
                            fetch('/restart', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ token, code: restartCode })
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    showToast('‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
                                    socket.emit('botRestarted', data.botName);
                                } else {
                                    showToast(data.message || '‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', 'danger');
                                }
                            })
                            .catch(err => {
                                console.error(err);
                                showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó', 'danger');
                            });
                        }
                    }

                    // ‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î (toggle) ‡∏ö‡∏≠‡∏ó
                    if (event.target.closest('.toggle-btn')) {
                        const token = decodeURIComponent(event.target.closest('.toggle-btn').getAttribute('data-token'));
                        const toggleCode = prompt('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô 6 ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏≠‡∏ó:');
                        if (toggleCode) {
                            fetch('/toggle', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ token, code: toggleCode })
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    showToast(data.message || '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
                                } else {
                                    showToast(data.message || '‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', 'danger');
                                }
                            })
                            .catch(err => {
                                console.error(err);
                                showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏≠‡∏ó', 'danger');
                            });
                        }
                    }
                });
            </script>
            <!-- Toast container ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô -->
            <div class="toast-container"></div>
        </body>
        </html>
    `);
});

// ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó
app.get("/start", (req, res) => {
    const error = req.query.error;

    let errorMessage = "";
    if (error === 'already-running') {
        errorMessage = `<div class="alert alert-warning" role="alert">‡∏ö‡∏≠‡∏ó‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß</div>`;
    } else if (error === 'invalid-token') {
        errorMessage = `<div class="alert alert-danger" role="alert">‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</div>`;
    } else if (error === 'missing-fields') {
        errorMessage = `<div class="alert alert-danger" role="alert">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô, ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô, ID ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô, ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡∏≠‡∏ó</div>`;
    } else if (error === 'invalid-password') {
        errorMessage = `<div class="alert alert-danger" role="alert">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô 6 ‡∏´‡∏•‡∏±‡∏Å</div>`;
    } else if (error === 'invalid-name') {
        errorMessage = `<div class="alert alert-danger" role="alert">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ‡∏¢‡∏≤‡∏ß 3-20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (a-z, A-Z, 0-9, -, _)</div>`;
    }

    res.send(`
        <!DOCTYPE html>
        <html lang="th">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó | ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
            <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@400;600&family=Roboto:wght@400;500&family=Press+Start+2P&display=swap" rel="stylesheet">
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
            <style>
                body {
                    background: url('https://i.postimg.cc/WbGnSFc9/snapedit-1734599436384.png') no-repeat center center fixed;
                    background-size: cover;
                    color: #ffffff;
                    font-family: 'Roboto', sans-serif;
                    position: relative;
                    overflow-x: hidden;
                }
                html, body {
                    height: 100%;
                    margin: 0;
                    padding: 0;
                }
                body {
                    display: flex;
                    flex-direction: column;
                    min-height: 100vh;
                }
                main.flex-grow-1 {
                    flex: 1;
                }
                .overlay {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0, 0, 0, 0.7);
                    z-index: -1;
                }
                .navbar {
                    background: rgba(13, 110, 253, 0.9) !important;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                }
                .navbar-brand {
                    font-family: 'Kanit', sans-serif;
                    font-weight: 600;
                    color: #ffffff !important;
                }
                .navbar-nav .nav-link {
                    color: #ffffff !important;
                    transition: color 0.3s ease;
                }
                .navbar-nav .nav-link:hover {
                    color: #ffc107 !important;
                }
                .glass-card {
                    background: rgba(255, 255, 255, 0.1);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                    border-radius: 16px;
                    padding: 24px;
                    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
                    transition: transform 0.3s ease, box-shadow 0.3s ease;
                }
                .glass-card:hover {
                    transform: translateY(-5px);
                    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.5);
                }
                .footer {
                    background: rgba(13, 110, 253, 0.9);
                    border-top: 2px solid rgba(255, 193, 7, 0.5);
                    padding: 20px 0;
                    font-size: 0.9rem;
                    color: #ffffff;
                }
                .animate-float {
                    animation: float 3s ease-in-out infinite;
                }
                @keyframes float {
                    0%, 100% { transform: translateY(0); }
                    50% { transform: translateY(-10px); }
                }
                .toast-container {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 1055;
                }
                .add-bot-form .form-label {
                    font-weight: 500;
                    color: #ffffff;
                }
                .form-control {
                    background: rgba(255, 255, 255, 0.2);
                    border: 1px solid rgba(255, 255, 255, 0.3);
                    border-radius: 8px;
                    padding: 10px 12px;
                    font-size: 1rem;
                    transition: border-color 0.3s ease, background 0.3s ease;
                    color: #ffffff;
                }
                .form-control::placeholder {
                    color: #e0e0e0;
                }
                .form-control:focus {
                    border-color: #ffc107;
                    box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.25);
                    background: rgba(255, 255, 255, 0.3);
                    color: #ffffff;
                }
                .btn-primary {
                    background: #ffc107;
                    border: none;
                    padding: 10px 20px;
                    font-size: 1rem;
                    border-radius: 8px;
                    transition: background 0.3s ease, transform 0.2s ease;
                    color: #212529;
                    font-weight: 600;
                }
                .btn-primary:hover {
                    background: #e0a800;
                    transform: translateY(-2px);
                }
            </style>
        </head>
        <body>
            <div class="overlay"></div>
            <nav class="navbar navbar-expand-lg navbar-dark mb-4">
                <div class="container">
                    <a class="navbar-brand d-flex align-items-center" href="/">
                        <i class="fas fa-robot fa-lg me-2 animate-float" style="color: #ffffff;"></i>
                        ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó
                    </a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarNav">
                        <ul class="navbar-nav ms-auto">
                            <li class="nav-item">
                                <a class="nav-link active" href="/start"><i class="fas fa-plus-circle me-1"></i> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/bots"><i class="fas fa-list me-1"></i> ‡∏î‡∏π‡∏ö‡∏≠‡∏ó‡∏£‡∏±‡∏ô</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/commands"><i class="fas fa-terminal me-1"></i> ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/how-to-make-bot"><i class="fas fa-video me-1"></i> ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </nav>

            <main class="flex-grow-1">
                <div class="container">
                    <div class="glass-card">
                        <h5 class="mb-4">
                            <i class="fas fa-plus-circle me-2" style="color: #ffc107;"></i>
                            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡πÉ‡∏´‡∏°‡πà
                        </h5>
                        ${errorMessage}
                        <form class="add-bot-form" method="POST" action="/start">
                            <div class="mb-3">
                                <label for="token" class="form-label">‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (AppState JSON)</label>
                                <textarea 
                                    id="token" 
                                    name="token" 
                                    class="form-control" 
                                    rows="4" 
                                    placeholder='{"appState": "..."}'
                                    required
                                ></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="prefix" class="form-label">‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡∏≠‡∏ó</label>
                                <input 
                                    type="text" 
                                    id="prefix" 
                                    name="prefix" 
                                    class="form-control" 
                                    placeholder="/" 
                                    required
                                    pattern="^.{1,10}$" 
                                    title="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 1-10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"
                                />
                            </div>
                            <div class="mb-3">
                                <label for="name" class="form-label">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó</label>
                                <input 
                                    type="text" 
                                    id="name" 
                                    name="name" 
                                    class="form-control" 
                                    placeholder="MyBot" 
                                    required
                                    pattern="^[a-zA-Z0-9_-]{3,20}$" 
                                    title="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 3-20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ a-z, A-Z, 0-9, -, _"
                                />
                            </div>
                            <div class="mb-3">
                                <label for="password" class="form-label">‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô 6 ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó</label>
                                <input 
                                    type="password" 
                                    id="password" 
                                    name="password" 
                                    class="form-control" 
                                    pattern="\\d{6}" 
                                    placeholder="123456" 
                                    required
                                    title="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô 6 ‡∏´‡∏•‡∏±‡∏Å"
                                />
                            </div>
                            <div class="mb-3">
                                <label for="adminID" class="form-label">ID ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó</label>
                                <input 
                                    type="text" 
                                    id="adminID" 
                                    name="adminID" 
                                    class="form-control" 
                                    placeholder="61555184860915" 
                                    required
                                    title="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ID ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó"
                                />
                            </div>
                            <button type="submit" class="btn btn-primary w-100">
                                <i class="fas fa-play me-2"></i>
                                ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó
                            </button>
                        </form>
                    </div>
                </div>
            </main>

            <footer class="footer text-center">
                <div class="container">
                    <p class="mb-0">¬© ${new Date().getFullYear()} ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó | ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ‚ù§Ô∏è</p>
                </div>
            </footer>

            <!-- Toast Container -->
            <div class="toast-container"></div>

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        </body>
        </html>
    `);
});

// ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏≠‡∏ó‡∏£‡∏±‡∏ô
app.get("/bots", (req, res) => {
    const data = generateBotData();
    res.send(`
        <!DOCTYPE html>
        <html lang="th">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>‡∏î‡∏π‡∏ö‡∏≠‡∏ó‡∏£‡∏±‡∏ô | ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
            <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@400;600&family=Roboto:wght@400;500&family=Press+Start+2P&display=swap" rel="stylesheet">
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
            <style>
                body {
                    background: url('https://i.postimg.cc/WbGnSFc9/snapedit-1734599436384.png') no-repeat center center fixed;
                    background-size: cover;
                    color: #ffffff;
                    font-family: 'Roboto', sans-serif;
                    position: relative;
                    overflow-x: hidden;
                }
                html, body {
                    height: 100%;
                    margin: 0;
                    padding: 0;
                }
                body {
                    display: flex;
                    flex-direction: column;
                    min-height: 100vh;
                }
                main.flex-grow-1 {
                    flex: 1;
                }
                .overlay {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0, 0, 0, 0.7);
                    z-index: -1;
                }
                .navbar {
                    background: rgba(13, 110, 253, 0.9) !important;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                }
                .navbar-brand {
                    font-family: 'Kanit', sans-serif;
                    font-weight: 600;
                    color: #ffffff !important;
                }
                .navbar-nav .nav-link {
                    color: #ffffff !important;
                    transition: color 0.3s ease;
                }
                .navbar-nav .nav-link:hover {
                    color: #ffc107 !important;
                }
                .glass-card {
                    background: rgba(255, 255, 255, 0.1);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                    border-radius: 16px;
                    padding: 24px;
                    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
                    transition: transform 0.3s ease, box-shadow 0.3s ease;
                }
                .glass-card:hover {
                    transform: translateY(-5px);
                    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.5);
                }
                .bot-table, .command-table {
                    width: 100%;
                    border-collapse: collapse;
                    margin-top: 20px;
                }
                .bot-table th, .bot-table td,
                .command-table th, .command-table td {
                    padding: 12px 15px;
                    text-align: left;
                }
                .bot-table th, .command-table th {
                    background-color: rgba(13, 110, 253, 0.9);
                    color: #fff;
                    font-weight: 600;
                }
                .bot-table tr:nth-child(even),
                .command-table tr:nth-child(even) {
                    background-color: rgba(255, 255, 255, 0.1);
                }
                .status-online {
                    background: #198754;
                    color: #ffffff;
                    padding: 5px 10px;
                    border-radius: 20px;
                    font-size: 0.9rem;
                    display: inline-flex;
                    align-items: center;
                    gap: 6px;
                }
                .status-active {
                    background: #20c997;
                    color: #ffffff;
                    padding: 5px 10px;
                    border-radius: 20px;
                    font-size: 0.9rem;
                    display: inline-flex;
                    align-items: center;
                    gap: 6px;
                }
                .status-connecting {
                    background: #ffc107;
                    color: #212529;
                    padding: 5px 10px;
                    border-radius: 20px;
                    font-size: 0.9rem;
                    display: inline-flex;
                    align-items: center;
                    gap: 6px;
                }
                .status-connection-failed {
                    background: #dc3545;
                    color: #ffffff;
                    padding: 5px 10px;
                    border-radius: 20px;
                    font-size: 0.9rem;
                    display: inline-flex;
                    align-items: center;
                    gap: 6px;
                }
                .status-offline {
                    background: #6c757d;
                    color: #ffffff;
                    padding: 5px 10px;
                    border-radius: 20px;
                    font-size: 0.9rem;
                    display: inline-flex;
                    align-items: center;
                    gap: 6px;
                }
                /* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ paused */
                .status-paused {
                    background: #0d6efd;
                    color: #ffffff;
                    padding: 5px 10px;
                    border-radius: 20px;
                    font-size: 0.9rem;
                    display: inline-flex;
                    align-items: center;
                    gap: 6px;
                }
                .footer {
                    background: rgba(13, 110, 253, 0.9);
                    border-top: 2px solid rgba(255, 193, 7, 0.5);
                    padding: 20px 0;
                    font-size: 0.9rem;
                    color: #ffffff;
                }
                .btn-warning, .btn-danger, .btn-secondary, .btn-info {
                    transition: transform 0.2s ease;
                }
                .btn-warning:hover, .btn-danger:hover, .btn-secondary:hover, .btn-info:hover {
                    transform: scale(1.05);
                }
                .bot-name {
                    font-family: 'Press Start 2P', cursive;
                    color: #ff5722;
                    font-size: 1.1rem;
                }
                .runtime {
                    font-weight: 500;
                    color: #ffc107;
                }
                .ping {
                    font-weight: 500;
                    color: #198754;
                }
                @media (max-width: 768px) {
                    .glass-card {
                        margin-bottom: 20px;
                    }
                    .bot-table th, .bot-table td,
                    .command-table th, .command-table td {
                        padding: 8px 10px;
                    }
                }
                .animate-float {
                    animation: float 3s ease-in-out infinite;
                }
                @keyframes float {
                    0%, 100% { transform: translateY(0); }
                    50% { transform: translateY(-10px); }
                }
            </style>
        </head>
        <body>
            <div class="overlay"></div>
            <nav class="navbar navbar-expand-lg navbar-dark mb-4">
                <div class="container">
                    <a class="navbar-brand d-flex align-items-center" href="/">
                        <i class="fas fa-robot fa-lg me-2 animate-float" style="color: #ffffff;"></i>
                        ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó
                    </a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarNav">
                        <ul class="navbar-nav ms-auto">
                            <li class="nav-item">
                                <a class="nav-link" href="/start"><i class="fas fa-plus-circle me-1"></i> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link active" href="/bots"><i class="fas fa-list me-1"></i> ‡∏î‡∏π‡∏ö‡∏≠‡∏ó‡∏£‡∏±‡∏ô</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/commands"><i class="fas fa-terminal me-1"></i> ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/how-to-make-bot"><i class="fas fa-video me-1"></i> ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </nav>

            <main class="flex-grow-1">
                <div class="container">
                    <div class="glass-card">
                        <h5 class="mb-4">
                            <i class="fas fa-list me-2" style="color: #198754;"></i>
                            ‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                        </h5>
                        <div class="table-responsive">
                            <table class="table bot-table">
                                <thead>
                                    <tr>
                                        <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó</th>
                                        <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                                        <th>‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô</th>
                                        <th>‡∏õ‡∏¥‡∏á</th>
                                        <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                                    </tr>
                                </thead>
                                <tbody id="botTableBody">
                                    ${data.botRows}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </main>

            <footer class="footer text-center">
                <div class="container">
                    <p class="mb-0">¬© ${new Date().getFullYear()} ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó | ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ‚ù§Ô∏è</p>
                </div>
            </footer>

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
            <script src="/socket.io/socket.io.js"></script>
            <script>
                const socket = io();

                function updateRuntime() {
                    const runtimeElements = document.querySelectorAll('.runtime');
                    const now = Date.now();
                    runtimeElements.forEach(el => {
                        const startTime = parseInt(el.getAttribute('data-start-time'));
                        if (!startTime) return;
                        const elapsed = now - startTime;
                        const seconds = Math.floor((elapsed / 1000) % 60);
                        const minutes = Math.floor((elapsed / (1000 * 60)) % 60);
                        const hours = Math.floor((elapsed / (1000 * 60 * 60)) % 24);
                        const days = Math.floor(elapsed / (1000 * 60 * 60 * 24));
                        el.textContent = \`\${days} ‡∏ß‡∏±‡∏ô \${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á \${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ \${seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\`;
                    });
                }
                function sendPing() {
                    const timestamp = Date.now();
                    socket.emit('ping', timestamp);
                }
                setInterval(sendPing, 5000);
                sendPing();

                socket.on('updateBots', (data) => {
                    const totalBotsEl = document.getElementById('totalBots');
                    if (totalBotsEl) totalBotsEl.textContent = data.totalBots;
                    const onlineBotsEl = document.getElementById('onlineBots');
                    if (onlineBotsEl) onlineBotsEl.textContent = data.onlineBots;
                    const activeBotsEl = document.getElementById('activeBots');
                    if (activeBotsEl) activeBotsEl.textContent = data.activeBots;
                    const websitePingEl = document.getElementById('websitePing');
                    if (websitePingEl) websitePingEl.textContent = data.websitePing + ' ms';

                    const botTableBody = document.getElementById('botTableBody');
                    if (botTableBody) {
                        botTableBody.innerHTML = data.botRows;
                    }
                    updateRuntime();
                });

                socket.on('botDeleted', (botName) => {
                    console.log(\`‡∏ö‡∏≠‡∏ó "\${botName}" ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö\`);
                });
                socket.on('botOffline', (botName) => {
                    console.log(\`‡∏ö‡∏≠‡∏ó "\${botName}" ‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå\`);
                });
                socket.on('botRestarted', (botName) => {
                    console.log(\`‡∏ö‡∏≠‡∏ó "\${botName}" ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó\`);
                });

                setInterval(updateRuntime, 1000);
                document.addEventListener('DOMContentLoaded', updateRuntime);
            </script>
        </body>
        </html>
    `);
});

// ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
app.get("/commands", (req, res) => {
    const commandsData = generateCommandData();
    res.send(`
        <!DOCTYPE html>
        <html lang="th">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ | ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
            <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@400;600&family=Roboto:wght@400;500&family=Press+Start+2P&display=swap" rel="stylesheet">
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
            <style>
                body {
                    background: url('https://i.postimg.cc/WbGnSFc9/snapedit-1734599436384.png') no-repeat center center fixed;
                    background-size: cover;
                    color: #ffffff;
                    font-family: 'Roboto', sans-serif;
                    position: relative;
                    overflow-x: hidden;
                }
                html, body {
                    height: 100%;
                    margin: 0;
                    padding: 0;
                }
                body {
                    display: flex;
                    flex-direction: column;
                    min-height: 100vh;
                }
                main.flex-grow-1 {
                    flex: 1;
                }
                .overlay {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0, 0, 0, 0.7);
                    z-index: -1;
                }
                .navbar {
                    background: rgba(13, 110, 253, 0.9) !important;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                }
                .navbar-brand {
                    font-family: 'Kanit', sans-serif;
                    font-weight: 600;
                    color: #ffffff !important;
                }
                .navbar-nav .nav-link {
                    color: #ffffff !important;
                    transition: color 0.3s ease;
                }
                .navbar-nav .nav-link:hover {
                    color: #ffc107 !important;
                }
                .glass-card {
                    background: rgba(255, 255, 255, 0.1);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                    border-radius: 16px;
                    padding: 24px;
                    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
                    transition: transform 0.3s ease, box-shadow 0.3s ease;
                }
                .glass-card:hover {
                    transform: translateY(-5px);
                    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.5);
                }
                .command-table {
                    width: 100%;
                    border-collapse: collapse;
                    margin-top: 20px;
                }
                .command-table th, .command-table td {
                    padding: 12px 15px;
                    text-align: left;
                }
                .command-table th {
                    background-color: rgba(13, 110, 253, 0.9);
                    color: #fff;
                    font-weight: 600;
                }
                .command-table tr:nth-child(even) {
                    background-color: rgba(255, 255, 255, 0.1);
                }
                .footer {
                    background: rgba(13, 110, 253, 0.9);
                    border-top: 2px solid rgba(255, 193, 7, 0.5);
                    padding: 20px 0;
                    font-size: 0.9rem;
                    color: #ffffff;
                }
                @media (max-width: 768px) {
                    .glass-card {
                        margin-bottom: 20px;
                    }
                    .command-table th, .command-table td {
                        padding: 8px 10px;
                    }
                }
                .animate-float {
                    animation: float 3s ease-in-out infinite;
                }
                @keyframes float {
                    0%, 100% { transform: translateY(0); }
                    50% { transform: translateY(-10px); }
                }
            </style>
        </head>
        <body>
            <div class="overlay"></div>
            <nav class="navbar navbar-expand-lg navbar-dark mb-4">
                <div class="container">
                    <a class="navbar-brand d-flex align-items-center" href="/">
                        <i class="fas fa-robot fa-lg me-2 animate-float" style="color: #ffffff;"></i>
                        ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó
                    </a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarNav">
                        <ul class="navbar-nav ms-auto">
                            <li class="nav-item">
                                <a class="nav-link" href="/start"><i class="fas fa-plus-circle me-1"></i> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/bots"><i class="fas fa-list me-1"></i> ‡∏î‡∏π‡∏ö‡∏≠‡∏ó‡∏£‡∏±‡∏ô</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link active" href="/commands"><i class="fas fa-terminal me-1"></i> ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/how-to-make-bot"><i class="fas fa-video me-1"></i> ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </nav>

            <main class="flex-grow-1">
                <div class="container">
                    <div class="glass-card">
                        <h5 class="mb-4">
                            <i class="fas fa-terminal me-2" style="color: #198754;"></i>
                            ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
                        </h5>
                        <div class="table-responsive">
                            <table class="table command-table">
                                <thead>
                                    <tr>
                                        <th>‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á</th>
                                        <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</th>
                                        <th>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</th>
                                    </tr>
                                </thead>
                                <tbody id="commandTableBody">
                                    ${commandsData}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </main>

            <footer class="footer text-center">
                <div class="container">
                    <p class="mb-0">¬© ${new Date().getFullYear()} ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó | ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ‚ù§Ô∏è</p>
                </div>
            </footer>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        </body>
        </html>
    `);
});

// ‡∏´‡∏ô‡πâ‡∏≤ "‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á"
app.get("/how-to-make-bot", (req, res) => {
    res.send(`
        <!DOCTYPE html>
        <html lang="th">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á | ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
            <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@400;600&family=Roboto:wght@400;500&family=Press+Start+2P&display=swap" rel="stylesheet">
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
            <style>
                body {
                    background: url('https://i.postimg.cc/WbGnSFc9/snapedit-1734599436384.png') no-repeat center center fixed;
                    background-size: cover;
                    color: #ffffff;
                    font-family: 'Roboto', sans-serif;
                    position: relative;
                    overflow-x: hidden;
                }
                html, body {
                    height: 100%;
                    margin: 0;
                    padding: 0;
                }
                body {
                    display: flex;
                    flex-direction: column;
                    min-height: 100vh;
                }
                main.flex-grow-1 {
                    flex: 1;
                }
                .overlay {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0, 0, 0, 0.7);
                    z-index: -1;
                }
                .navbar {
                    background: rgba(13, 110, 253, 0.9) !important;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                }
                .navbar-brand {
                    font-family: 'Kanit', sans-serif;
                    font-weight: 600;
                    color: #ffffff !important;
                }
                .navbar-nav .nav-link {
                    color: #ffffff !important;
                    transition: color 0.3s ease;
                }
                .navbar-nav .nav-link:hover {
                    color: #ffc107 !important;
                }
                .glass-card {
                    background: rgba(255, 255, 255, 0.1);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                    border-radius: 16px;
                    padding: 24px;
                    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
                    transition: transform 0.3s ease, box-shadow 0.3s ease;
                }
                .glass-card:hover {
                    transform: translateY(-5px);
                    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.5);
                }
                .footer {
                    background: rgba(13, 110, 253, 0.9);
                    border-top: 2px solid rgba(255, 193, 7, 0.5);
                    padding: 20px 0;
                    font-size: 0.9rem;
                    color: #ffffff;
                }
                .animate-float {
                    animation: float 3s ease-in-out infinite;
                }
                @keyframes float {
                    0%, 100% { transform: translateY(0); }
                    50% { transform: translateY(-10px); }
                }
            </style>
        </head>
        <body>
            <div class="overlay"></div>
            <nav class="navbar navbar-expand-lg navbar-dark mb-4">
                <div class="container">
                    <a class="navbar-brand d-flex align-items-center" href="/">
                        <i class="fas fa-robot fa-lg me-2 animate-float" style="color: #ffffff;"></i>
                        ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó
                    </a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarNav">
                        <ul class="navbar-nav ms-auto">
                            <li class="nav-item">
                                <a class="nav-link" href="/start"><i class="fas fa-plus-circle me-1"></i> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/bots"><i class="fas fa-list me-1"></i> ‡∏î‡∏π‡∏ö‡∏≠‡∏ó‡∏£‡∏±‡∏ô</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/commands"><i class="fas fa-terminal me-1"></i> ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link active" href="/how-to-make-bot"><i class="fas fa-video me-1"></i> ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </nav>

            <main class="flex-grow-1">
                <div class="container">
                    <div class="glass-card">
                        <h5 class="mb-4">
                            <i class="fas fa-video me-2" style="color: #ffc107;"></i>
                            ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á
                        </h5>
                        <p>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏Ñ‡∏•‡∏¥‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ:</p>
                        <div class="ratio ratio-16x9">
                            <iframe src="https://firebasestorage.googleapis.com/v0/b/goak-71ac8.appspot.com/o/XRecorder_18122024_114720.mp4?alt=media&token=1f243d3d-91ed-448f-83c7-3ee01d0407e4" allowfullscreen></iframe>
                        </div>
                        <hr>
                        <h6>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô:</h6>
                        <ol>
                            <li>‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏Å <a href="https://github.com/c3cbot/c3c-ufc-utility/archive/refs/tags/1.5.zip" target="_blank" class="text-decoration-none text-warning">GitHub</a></li>
                            <li>‡πÅ‡∏ï‡∏Å‡πÑ‡∏ü‡∏•‡πå ZIP ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</li>
                            <li>‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</li>
                            <li>‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î</li>
                            <li>‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</li>
                        </ol>
                        <p>‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô</p>
                    </div>
                </div>
            </main>

            <footer class="footer text-center">
                <div class="container">
                    <p class="mb-0">¬© ${new Date().getFullYear()} ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó | ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ‚ù§Ô∏è</p>
                </div>
            </footer>

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        </body>
        </html>
    `);
});

// Route ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Debug)
app.get("/debug/bots", (req, res) => {
    const bots = Object.entries(botSessions).map(([token, bot]) => ({
        token,
        name: bot.name,
        status: bot.status,
        password: bot.password,
        adminID: bot.adminID,
        ping: bot.ping || 'N/A',
        prefix: bot.prefix
    }));
    res.json(bots);
});

// --------------------- POST /start (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó‡πÉ‡∏´‡∏°‡πà) ----------------------
app.post('/start', async (req, res) => {
    const { token, prefix, name, password, adminID } = req.body;

    if (!token || !prefix || !name || !password || !adminID) {
        return res.redirect('/start?error=missing-fields');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç 6 ‡∏´‡∏•‡∏±‡∏Å)
    const passwordRegex = /^\d{6}$/;
    if (!passwordRegex.test(password)) {
        return res.redirect('/start?error=invalid-password');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó
    const nameRegex = /^[a-zA-Z0-9_-]{3,20}$/;
    if (!nameRegex.test(name)) {
        return res.redirect('/start?error=invalid-name');
    }

    try {
        const appState = JSON.parse(token);
        const tokenKey = token.trim();
        if (botSessions[tokenKey]) {
            return res.redirect('/start?error=already-running');
        }

        const botName = name.trim();
        const botPrefix = prefix.trim();
        const startTime = Date.now();

        // ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        await startBotWithRetry(appState, tokenKey, botName, botPrefix, startTime, password, adminID, 5);
        res.redirect('/bots');
        io.emit('updateBots', generateBotData());
    } catch (err) {
        console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó: ${err ? err.message : err}`));
        return res.redirect('/start?error=invalid-token');
    }
});

// --------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô startBotWithRetry ----------------------
async function startBotWithRetry(appState, token, name, prefix, startTime, password, adminID, retries) {
    let attempt = 0;
    while (attempt < retries) {
        try {
            await startBot(appState, token, name, prefix, startTime, password, adminID, true);
            console.log(chalk.green(`‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${name}`));
            return;
        } catch (err) {
            attempt++;
            console.error(chalk.red(`‚ùå ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${attempt} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${err.message}`));
            if (attempt >= retries) {
                console.error(chalk.red(`‚ùå ‡∏ö‡∏≠‡∏ó ${name} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏≠‡∏á ${retries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`));
                await deleteBot(token, false);
                throw new Error(`‡∏ö‡∏≠‡∏ó ${name} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô`);
            }
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
    }
}

// --------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô startBot (‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ryuu-fca-api) ----------------------
async function startBot(appState, token, name, prefix, startTime, password, adminID, saveToFile = true) {
    return new Promise((resolve, reject) => {
        botSessions[token] = { 
            api: null, 
            name, 
            prefix,
            startTime, 
            status: 'connecting',
            password: password.toString(),
            adminID: adminID.trim(),
            ping: 'N/A',
            deletionTimeout: null,
            retryCount: 0
        };

        login({ appState }, (err, api) => {
            if (err) {
                console.error(chalk.red(`‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô: ${token}`));
                botSessions[token].status = 'connection_failed';
                io.emit('updateBots', generateBotData());
                return reject(err);
            }

            botSessions[token].api = api;
            botSessions[token].status = 'online';
            botCount = Math.max(botCount, parseInt(name.replace(/‚ú®/g, '').replace('Bot ', '') || '0'));

            console.log(chalk.green(figlet.textSync("Bot Started!", { horizontalLayout: "full" })));
            console.log(chalk.green(`‚úÖ ${name} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô: ${token}`));
            console.log(chalk.green(`üîë ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î: ${password}`));
            console.log(chalk.green(`üîë ID ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô: ${adminID}`));

            api.setOptions({ listenEvents: true });

            // ‡∏ü‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå
            api.listenMqtt(async (err, event) => {
                if (err) {
                    console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err}`));
                    botSessions[token].status = 'offline';
                    io.emit('updateBots', generateBotData());
                    io.emit('botOffline', botSessions[token].name);

                    // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                    if (!botSessions[token].deletionTimeout) {
                        botSessions[token].deletionTimeout = setTimeout(() => {
                            deleteBot(token, true);
                        }, 60000);
                        console.log(chalk.yellow(`‚åõ ‡∏ö‡∏≠‡∏ó ${name} ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`));
                    }
                    return;
                }

                // ‡∏ñ‡πâ‡∏≤‡∏ö‡∏≠‡∏ó‡∏ñ‡∏π‡∏Å "pause" (status === 'paused') ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå
                if (botSessions[token].status === 'paused') {
                    return; 
                }

                // ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå
                // console.log(chalk.blue(`üì© ‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå: ${event.type}`));

                // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå events
                if (event.logMessageType && events[event.logMessageType]) {
                    for (const eventHandler of events[event.logMessageType]) {
                        try {
                            await eventHandler.run({ api, event });
                        } catch (error) {
                            console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå ${eventHandler.config.name}:`, error));
                        }
                    }
                }

                // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                if (event.type === "message") {
                    const message = event.body ? event.body.trim() : "";
                    if (!message.startsWith(botSessions[token].prefix)) return;

                    const args = message.slice(botSessions[token].prefix.length).trim().split(/ +/);
                    const commandName = args.shift().toLowerCase();
                    const command = commands[commandName];

                    if (command && typeof command.run === "function") {
                        try {
                            await command.run({ api, event, args });
                            commandUsage[commandName] = (commandUsage[commandName] || 0) + 1;
                            saveCommandUsage();
                            io.emit('updateBots', generateBotData());
                            io.emit('updateCommands', generateCommandData());
                        } catch (error) {
                            console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ${commandName}:`, error));
                            api.sendMessage("‚ùó ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", event.threadID);
                        }
                    } else {
                        api.sendMessage("‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏", event.threadID);
                    }
                }

                // ‡∏ñ‡πâ‡∏≤‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ online
                if (botSessions[token].status === 'online') {
                    if (botSessions[token].deletionTimeout) {
                        clearTimeout(botSessions[token].deletionTimeout);
                        botSessions[token].deletionTimeout = null;
                        console.log(chalk.green(`üîÑ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏≠‡∏ó ${name}`));
                    }
                }
            });

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
            if (saveToFile) {
                const botData = { appState, token, name, prefix, startTime, password, adminID };
                const botFilePath = path.join(botsDir, `${name.replace(/ /g, '_')}.json`);
                fs.writeFileSync(botFilePath, JSON.stringify(botData, null, 4));
            }

            io.emit('updateBots', generateBotData());
            resolve();
        });
    });
}

// --------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô deleteBot ----------------------
function deleteBot(token, emitDeleted = true) {
    const bot = botSessions[token];
    if (!bot) {
        console.log(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö: ${token}`));
        return;
    }

    const { name } = bot;

    // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå .json
    const botFilePath = path.join(botsDir, `${name.replace(/ /g, '_')}.json`);
    if (fs.existsSync(botFilePath)) {
        fs.unlinkSync(botFilePath);
        console.log(chalk.green(`‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏≠‡∏ó: ${botFilePath}`));
    }

    // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
    delete botSessions[token];
    console.log(chalk.green(`‚úÖ ‡∏•‡∏ö‡∏ö‡∏≠‡∏ó‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö: ${token}`));

    if (emitDeleted) {
        io.emit('updateBots', generateBotData());
        io.emit('botDeleted', name);
    }
}

// --------------------- ‡∏•‡∏ö‡∏ö‡∏≠‡∏ó (POST /delete) ----------------------
app.post('/delete', async (req, res) => {
    const { token, code } = req.body;
    if (!token || !code) {
        return res.json({ success: false, message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }
    const trimmedToken = token.trim();
    const bot = botSessions[trimmedToken];
    if (!bot) {
        return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });
    }
    if (bot.password.toString() !== code.toString()) {
        return res.json({ success: false, message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }
    try {
        deleteBot(trimmedToken, true);
        res.json({ success: true, message: '‡∏•‡∏ö‡∏ö‡∏≠‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } catch (err) {
        console.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏≠‡∏ó: ${err.message}`);
        res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ' });
    }
});

// --------------------- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô (POST /edit) ----------------------
app.post('/edit', async (req, res) => {
    const { token, code, newToken } = req.body;
    if (!token || !code || !newToken) {
        return res.json({ success: false, message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }
    const trimmedToken = token.trim();
    const bot = botSessions[trimmedToken];
    if (!bot) {
        return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });
    }
    if (bot.password.toString() !== code.toString()) {
        return res.json({ success: false, message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }
    const trimmedNewToken = newToken.trim();
    if (botSessions[trimmedNewToken]) {
        return res.json({ success: false, message: '‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' });
    }
    try {
        // ‡∏•‡∏ö‡∏ö‡∏≠‡∏ó‡πÄ‡∏Å‡πà‡∏≤
        deleteBot(trimmedToken, false);
        const newAppState = JSON.parse(newToken);
        const newPassword = generate6DigitCode(); // ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÉ‡∏ä‡πâ bot.password ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πá‡πÑ‡∏î‡πâ
        const startTime = Date.now();
        await startBotWithRetry(newAppState, trimmedNewToken, bot.name, bot.prefix, startTime, newPassword, bot.adminID, 5);

        console.log(chalk.green(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó: ${bot.name} ‡πÄ‡∏õ‡πá‡∏ô ${trimmedNewToken}`));
        io.emit('updateBots', generateBotData());
        res.json({ success: true, message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } catch (err) {
        console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô: ${err.message}`));
        res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô' });
    }
});

// --------------------- ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó (POST /restart) ----------------------
app.post('/restart', async (req, res) => {
    const { token, code } = req.body;
    if (!token || !code) {
        return res.json({ success: false, message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }
    const trimmedToken = token.trim();
    const bot = botSessions[trimmedToken];
    if (!bot) {
        return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó' });
    }
    if (bot.password.toString() !== code.toString()) {
        return res.json({ success: false, message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }
    try {
        const { appState, name, prefix, password, adminID } = bot;
        deleteBot(trimmedToken, false);
        await startBotWithRetry(appState, trimmedToken, name, prefix, Date.now(), password, adminID, 5);
        console.log(chalk.green(`‚úÖ ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${name}`));
        io.emit('updateBots', generateBotData());
        res.json({ success: true, message: '‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', botName: name });
    } catch (err) {
        console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó: ${err.message}`));
        res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó' });
    }
});

// --------------------- ‡πÉ‡∏´‡∏°‡πà: ‡∏õ‡∏∏‡πà‡∏° ‚Äú‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î‚Äù (Pause/Unpause) ‡∏ö‡∏≠‡∏ó (POST /toggle) ----------------------
app.post('/toggle', (req, res) => {
    const { token, code } = req.body;
    if (!token || !code) {
        return res.json({ success: false, message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }
    const trimmedToken = token.trim();
    const bot = botSessions[trimmedToken];
    if (!bot) {
        return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î' });
    }
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    if (bot.password.toString() !== code.toString()) {
        return res.json({ success: false, message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    // ‡∏ñ‡πâ‡∏≤ status ‡πÄ‡∏õ‡πá‡∏ô online/active ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô paused
    if (bot.status === 'online' || bot.status === 'active') {
        bot.status = 'paused';
        io.emit('updateBots', generateBotData());
        return res.json({ success: true, message: `‡∏ö‡∏≠‡∏ó "${bot.name}" ‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÅ‡∏•‡πâ‡∏ß` });
    }
    // ‡∏ñ‡πâ‡∏≤ status ‡πÄ‡∏õ‡πá‡∏ô paused ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô online
    if (bot.status === 'paused') {
        bot.status = 'online';
        io.emit('updateBots', generateBotData());
        return res.json({ success: true, message: `‡∏ö‡∏≠‡∏ó "${bot.name}" ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß` });
    }

    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∑‡πà‡∏ô ‡πÜ (‡πÄ‡∏ä‡πà‡∏ô connection_failed, offline ‡∏Ø‡∏•‡∏Ø) ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö toggle
    return res.json({ 
        success: false, 
        message: `‡∏ö‡∏≠‡∏ó‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "${bot.status}" ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ` 
    });
});

// --------------------- Socket.io ----------------------
io.on('connection', (socket) => {
    console.log(chalk.blue('üîå Socket.io client connected'));

    socket.on('ping', (timestamp) => {
        const latency = Date.now() - timestamp;
        const ping = Math.min(latency, 200);
        websitePing = ping;
        io.emit('updateBots', generateBotData());
    });

    socket.emit('updateBots', generateBotData());

    socket.on('disconnect', () => {
        console.log(chalk.red('üîå Socket.io client disconnected'));
    });
});

// --------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏¥‡∏á + ‡∏•‡∏ö‡∏ö‡∏≠‡∏ó offline ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ----------------------
setInterval(() => {
    Object.values(botSessions).forEach(bot => {
        // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏á‡∏™‡∏∏‡πà‡∏° 1-200 ms
        bot.ping = Math.floor(Math.random() * 200) + 1;
    });
    io.emit('updateBots', generateBotData());
}, 5000);

setInterval(() => {
    console.log(chalk.yellow('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...'));
    let botsToDelete = 0;
    Object.keys(botSessions).forEach(token => {
        const bot = botSessions[token];
        if (bot.status === 'connection_failed' || bot.status === 'offline') {
            console.log(chalk.yellow(`‚åõ ‡∏ö‡∏≠‡∏ó "${bot.name}" ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "${bot.status}"`));
            deleteBot(token, true);
            botsToDelete++;
        }
    });
    if (botsToDelete === 0) {
        console.log(chalk.green('‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ'));
    }
}, 300000); // 5 ‡∏ô‡∏≤‡∏ó‡∏µ

// --------------------- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå + ‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏≠‡∏ó‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå ----------------------
server.listen(PORT, () => {
    console.log(chalk.blue(`üåê ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà http://localhost:${PORT}`));
    console.log(chalk.green(figlet.textSync("Bot Management", { horizontalLayout: "full" })));
    loadBotsFromFiles();
});
