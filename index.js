const fs = require("fs");
const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const login = require("ryuu-fca-api");
const chalk = require("chalk");
const figlet = require("figlet");
const path = require("path");

const app = express();
const server = http.createServer(app);
const io = new Server(server);
const PORT = 3005; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏õ‡πá‡∏ô 3005

let botCount = 0; // ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏≠‡∏ó
const botSessions = {}; // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏°‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô
const prefix = "/"; // ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `commands`
const commands = {};
if (fs.existsSync("./commands")) {
  fs.readdirSync("./commands").forEach((file) => {
    if (file.endsWith(".js")) {
      const command = require(`./commands/${file}`);
      if (command.config && command.config.name) {
        commands[command.config.name.toLowerCase()] = command;
        console.log(`üì¶ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${command.config.name}`);
      } else {
        console.log(`‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "${file}" ‡πÑ‡∏°‡πà‡∏°‡∏µ config ‡∏´‡∏£‡∏∑‡∏≠ name`);
      }
    }
  });
}

// ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `events`
const events = {};
if (fs.existsSync("./events")) {
  fs.readdirSync("./events").forEach((file) => {
    if (file.endsWith(".js")) {
      const eventCommand = require(`./events/${file}`);
      if (eventCommand.config && eventCommand.config.eventType) {
        eventCommand.config.eventType.forEach((type) => {
          if (!events[type]) events[type] = [];
          events[type].push(eventCommand);
        });
        console.log(`üîî ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${file}`);
      } else {
        console.log(`‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå "${file}" ‡πÑ‡∏°‡πà‡∏°‡∏µ config ‡∏´‡∏£‡∏∑‡∏≠ eventType`);
      }
    }
  });
}

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏≠‡∏ó
app.get("/", (req, res) => {
  const totalBots = Object.keys(botSessions).length;
  const onlineBots = Object.values(botSessions).filter(bot => bot.status === 'online').length;
  const activeBots = Object.values(botSessions).filter(bot => bot.status === 'active').length;

  res.send(`
    <!DOCTYPE html>
    <html lang="th">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Bot Management</title>
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
      <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
      <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&family=Poppins:wght@400;600&display=swap" rel="stylesheet">
      <style>
        body {
          background-color: #f0f2f5;
          font-family: 'Poppins', sans-serif;
          transition: background-color 0.3s, color 0.3s;
        }
        .navbar-brand {
          font-family: 'Roboto', sans-serif;
          font-weight: bold;
          font-size: 1.8rem;
        }
        .container {
          margin-top: 40px;
        }
        .status-online {
          color: #28a745;
          font-weight: bold;
        }
        .status-online i {
          color: #28a745;
          margin-right: 5px;
        }
        .status-offline {
          color: #dc3545;
          font-weight: bold;
        }
        .status-offline i {
          color: #dc3545;
          margin-right: 5px;
        }
        .bot-table th, .bot-table td {
          vertical-align: middle;
        }
        .bot-name {
          display: flex;
          align-items: center;
          font-weight: 500;
        }
        .bot-name i {
          margin-right: 8px;
          animation: float 3s ease-in-out infinite;
        }
        @keyframes float {
          0% { transform: translateY(0); }
          50% { transform: translateY(-5px); }
          100% { transform: translateY(0); }
        }
        .runtime {
          font-weight: 500;
          color: #6c757d;
        }
        .card {
          border: none;
          border-radius: 15px;
          box-shadow: 0 4px 8px rgba(0,0,0,0.1);
          transition: transform 0.2s, box-shadow 0.2s;
        }
        .card:hover {
          transform: translateY(-5px);
          box-shadow: 0 8px 16px rgba(0,0,0,0.2);
        }
        .footer {
          position: fixed;
          bottom: 0;
          width: 100%;
          height: 60px;
          background-color: #f8f9fa;
        }
        /* Dark Mode Styles */
        body.dark-mode {
          background-color: #121212;
          color: #ffffff;
        }
        body.dark-mode .card {
          background-color: #1e1e1e;
          color: #ffffff;
          box-shadow: 0 4px 8px rgba(255,255,255,0.1);
        }
        body.dark-mode .navbar {
          background-color: #1f1f1f;
        }
        body.dark-mode .footer {
          background-color: #1f1f1f;
        }
        body.dark-mode .status-online {
          color: #28a745;
        }
        body.dark-mode .status-offline {
          color: #dc3545;
        }
        body.dark-mode .bot-name i {
          color: #28a745;
        }
        body.dark-mode .runtime {
          color: #adb5bd;
        }
        .toggle-switch {
          cursor: pointer;
          transition: color 0.3s;
        }
        .toggle-switch:hover {
          color: #ffc107;
        }
        /* Chart Container */
        .chart-container {
          position: relative;
          height: 400px;
          width: 100%;
        }
      </style>
    </head>
    <body>
      <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
          <a class="navbar-brand" href="#">ü§ñ Bot Management</a>
          <div class="d-flex">
            <i class="fa-solid fa-moon toggle-switch" id="darkModeToggle"></i>
          </div>
        </div>
      </nav>

      <div class="container">
        <!-- Dashboard Statistics -->
        <div class="row mb-4">
          <div class="col-md-4 mb-3">
            <div class="card text-white bg-primary">
              <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                  <div>
                    <h5 class="card-title">‡∏ö‡∏≠‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h5>
                    <p class="card-text display-4" id="totalBots">${totalBots}</p>
                  </div>
                  <i class="fa-solid fa-robot fa-3x"></i>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-4 mb-3">
            <div class="card text-white bg-success">
              <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                  <div>
                    <h5 class="card-title">‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</h5>
                    <p class="card-text display-4" id="onlineBots">${onlineBots}</p>
                  </div>
                  <i class="fa-solid fa-check-circle fa-3x"></i>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-4 mb-3">
            <div class="card text-white bg-warning">
              <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                  <div>
                    <h5 class="card-title">‡∏ö‡∏≠‡∏ó‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</h5>
                    <p class="card-text display-4" id="activeBots">${activeBots}</p>
                  </div>
                  <i class="fa-solid fa-clock fa-3x"></i>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="row">
          <!-- ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡πÉ‡∏´‡∏°‡πà -->
          <div class="col-lg-5 mb-4">
            <div class="card shadow">
              <div class="card-body">
                <h5 class="card-title"><i class="fa-solid fa-plus-circle"></i> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡πÉ‡∏´‡∏°‡πà</h5>
                <form method="POST" action="/start">
                  <div class="mb-3">
                    <label for="token" class="form-label">‡πÉ‡∏™‡πà‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</label>
                    <textarea id="token" name="token" class="form-control" rows="4" placeholder='{"appState": "YOUR_APP_STATE"}' required></textarea>
                  </div>
                  <button type="submit" class="btn btn-success w-100"><i class="fa-solid fa-play"></i> ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó</button>
                </form>
              </div>
            </div>
          </div>

          <!-- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô -->
          <div class="col-lg-7 mb-4">
            <div class="card shadow">
              <div class="card-body">
                <h5 class="card-title"><i class="fa-solid fa-tachometer-alt-fast"></i> ‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</h5>
                <div class="table-responsive">
                  <table class="table table-hover bot-table">
                    <thead class="table-dark">
                      <tr>
                        <th scope="col">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó</th>
                        <th scope="col">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                        <th scope="col">‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô</th>
                      </tr>
                    </thead>
                    <tbody id="botTableBody">
                      ${
                        Object.keys(botSessions).length > 0
                          ? Object.keys(botSessions)
                              .map(
                                (token) => `
                      <tr>
                        <td>
                          <div class="bot-name">
                            <i class="fa-solid fa-robot"></i> ${botSessions[token].name}
                          </div>
                        </td>
                        <td>
                          <span class="${botSessions[token].status === 'online' ? 'status-online' : 'status-offline'}"><i class="fa-solid fa-circle"></i> ${botSessions[token].status === 'online' ? '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå' : '‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå'}</span>
                        </td>
                        <td>
                          <span class="runtime" data-start-time="${botSessions[token].startTime}">00 ‡∏ß‡∏±‡∏ô 00 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á 00 ‡∏ô‡∏≤‡∏ó‡∏µ 00 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</span>
                        </td>
                      </tr>
                      `
                              )
                              .join("")
                          : `<tr><td colspan="3" class="text-center">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</td></tr>`
                      }
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- ‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ -->
        <div class="row">
          <div class="col-12">
            <div class="card shadow">
              <div class="card-body">
                <h5 class="card-title"><i class="fa-solid fa-chart-line"></i> ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ö‡∏≠‡∏ó</h5>
                <div class="chart-container">
                  <canvas id="botChart"></canvas>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <footer class="footer py-3 bg-light">
        <div class="container text-center">
          <span class="text-muted">&copy; 2024 Bot Management System</span>
        </div>
      </footer>

      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
      <script src="/socket.io/socket.io.js"></script>
      <script>
        // ‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏°‡∏∑‡∏î
        const toggleSwitch = document.getElementById('darkModeToggle');
        toggleSwitch.addEventListener('click', () => {
          document.body.classList.toggle('dark-mode');
          toggleSwitch.classList.toggle('fa-sun');
        });

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô
        function updateRuntime() {
          const runtimeElements = document.querySelectorAll('.runtime');
          const now = Date.now();

          runtimeElements.forEach(el => {
            const startTime = parseInt(el.getAttribute('data-start-time'));
            const elapsed = now - startTime;

            const seconds = Math.floor((elapsed / 1000) % 60);
            const minutes = Math.floor((elapsed / (1000 * 60)) % 60);
            const hours = Math.floor((elapsed / (1000 * 60 * 60)) % 24);
            const days = Math.floor(elapsed / (1000 * 60 * 60 * 24));

            el.textContent = \`\${days.toString().padStart(2, '0')} ‡∏ß‡∏±‡∏ô \${hours.toString().padStart(2, '0')} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á \${minutes.toString().padStart(2, '0')} ‡∏ô‡∏≤‡∏ó‡∏µ \${seconds.toString().padStart(2, '0')} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\`;
          });
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
        function updateChart(data) {
          botChart.data.labels = data.labels;
          botChart.data.datasets[0].data = data.values;
          botChart.update();
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
        const ctx = document.getElementById('botChart').getContext('2d');
        window.botChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: [], // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
            datasets: [{
              label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
              data: [],
              backgroundColor: 'rgba(54, 162, 235, 0.2)',
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 2,
              fill: true,
              tension: 0.4,
              pointBackgroundColor: 'rgba(54, 162, 235, 1)',
              pointRadius: 5,
              pointHoverRadius: 7,
            }]
          },
          options: {
            responsive: true,
            plugins: {
              legend: {
                display: true,
                labels: {
                  font: {
                    size: 14
                  }
                }
              },
              tooltip: {
                enabled: true
              }
            },
            scales: {
              x: {
                type: 'time',
                time: {
                  unit: 'minute',
                  displayFormats: {
                    minute: 'HH:mm'
                  }
                },
                title: {
                  display: true,
                  text: '‡πÄ‡∏ß‡∏•‡∏≤',
                  font: {
                    size: 16
                  }
                }
              },
              y: {
                beginAtZero: true,
                title: {
                  display: true,
                  text: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏≠‡∏ó',
                  font: {
                    size: 16
                  }
                }
              }
            }
          }
        });

        // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Socket.io
        const socket = io();

        // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏≠‡∏ó‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        socket.on('updateBots', (data) => {
          document.getElementById('totalBots').textContent = data.totalBots;
          document.getElementById('onlineBots').textContent = data.onlineBots;
          document.getElementById('activeBots').textContent = data.activeBots;
          updateChart(data.chartData);
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ö‡∏≠‡∏ó
          const botTableBody = document.getElementById('botTableBody');
          botTableBody.innerHTML = data.botRows;
        });

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
        document.addEventListener('DOMContentLoaded', () => {
          updateRuntime();
          setInterval(updateRuntime, 1000);
        });
      </script>
    </body>
    </html>
  `);
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô
app.post("/start", async (req, res) => {
  const token = req.body.token.trim();

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (botSessions[token]) {
    return res.redirect("/?error=already-running");
  }

  botCount += 1;
  const botName = `Bot ${botCount}`;
  const startTime = Date.now(); // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö UNIX timestamp

  try {
    const appState = JSON.parse(token);
    await startBot(appState, token, botName, startTime);
    res.redirect("/");
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡πà‡∏≤‡∏ô Socket.io
    io.emit('updateBots', generateBotData());
  } catch (err) {
    console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó: ${err.message}`));
    botCount -= 1; // ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏≠‡∏ó‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    res.redirect("/?error=invalid-token");
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Socket.io
function generateBotData() {
  const totalBots = Object.keys(botSessions).length;
  const onlineBots = Object.values(botSessions).filter(bot => bot.status === 'online').length;
  const activeBots = Object.values(botSessions).filter(bot => bot.status === 'active').length;
  const botRows = Object.keys(botSessions).length > 0
    ? Object.keys(botSessions)
        .map(
          (token) => `
    <tr>
      <td>
        <div class="bot-name">
          <i class="fa-solid fa-robot"></i> ${botSessions[token].name}
        </div>
      </td>
      <td>
        <span class="${botSessions[token].status === 'online' ? 'status-online' : 'status-offline'}"><i class="fa-solid fa-circle"></i> ${botSessions[token].status === 'online' ? '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå' : '‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå'}</span>
      </td>
      <td>
        <span class="runtime" data-start-time="${botSessions[token].startTime}">00 ‡∏ß‡∏±‡∏ô 00 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á 00 ‡∏ô‡∏≤‡∏ó‡∏µ 00 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</span>
      </td>
    </tr>
    `
        )
        .join("")
    : `<tr><td colspan="3" class="text-center">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</td></tr>`;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ)
  // ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
  const chartData = {
    labels: Array.from({ length: 10 }, (_, i) => new Date(Date.now() - (10 - i) * 60000).toLocaleTimeString()), // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 10 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    values: Array.from({ length: 10 }, () => Math.floor(Math.random() * 10)) // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏≠‡∏ó‡∏™‡∏∏‡πà‡∏°
  };

  return { totalBots, onlineBots, activeBots, botRows, chartData };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó
async function startBot(appState, token, name, startTime) {
  return new Promise((resolve, reject) => {
    login({ appState }, (err, api) => {
      if (err) {
        console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô: ${token}`));
        return reject(err);
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (botSessions[token]) {
        console.log(chalk.yellow(`‚ö†Ô∏è ‡∏ö‡∏≠‡∏ó‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: ${token}`));
        return reject(new Error('Bot already running with this token'));
      }

      botSessions[token] = { api, name, startTime, status: 'online' };
      console.log(
        chalk.green(figlet.textSync("Bot Started!", { horizontalLayout: "full" }))
      );
      console.log(chalk.green(`‚úÖ ${name} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô: ${token}`));

      api.setOptions({ listenEvents: true });

      api.listenMqtt(async (err, event) => {
        if (err) {
          console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err}`);
          botSessions[token].status = 'offline';
          io.emit('updateBots', generateBotData());
          return;
        }

        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
        if (event.logMessageType && events[event.logMessageType]) {
          for (const eventCommand of events[event.logMessageType]) {
            try {
              await eventCommand.run({ api, event });
              console.log(`üîÑ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${eventCommand.config.name}`);
            } catch (error) {
              console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå ${eventCommand.config.name}:`, error);
            }
          }
        }

        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        if (event.type === "message") {
          const senderID = event.senderID;
          const message = event.body ? event.body.trim() : "";

          if (!message.startsWith(prefix)) return;

          const args = message.slice(prefix.length).trim().split(/ +/);
          const commandName = args.shift().toLowerCase();
          const command = commands[commandName];

          if (command && typeof command.run === "function") {
            try {
              await command.run({ api, event, args });
              console.log(`‚úÖ ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${commandName}`);
            } catch (error) {
              console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ${commandName}:`, error);
              api.sendMessage("‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á", event.threadID);
            }
          } else {
            api.sendMessage("‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", event.threadID);
          }
        }
      });

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡πà‡∏≤‡∏ô Socket.io ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó
      io.emit('updateBots', generateBotData());
      resolve();
    });
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏≠‡∏ó
app.post("/stop", (req, res) => {
  const token = req.body.token;

  if (botSessions[token]) {
    botSessions[token].api.logout();
    botSessions[token].status = 'offline'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
    delete botSessions[token];
    res.redirect("/");
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡πà‡∏≤‡∏ô Socket.io
    io.emit('updateBots', generateBotData());
  } else {
    res.redirect("/?error=not-found");
  }
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
server.listen(PORT, () => {
  console.log(chalk.blue(`üåê ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà http://localhost:${PORT}`));
});
