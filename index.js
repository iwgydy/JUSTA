const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const login = require('ryuu-fca-api');
const chalk = require('chalk');
const figlet = require('figlet');
const fs = require('fs');
const path = require('path');
const session = require('express-session');
const bcrypt = require('bcrypt');

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏ó
const USERS_FILE = path.join(__dirname, 'users.json');
const BOTDATA_FILE = path.join(__dirname, 'botData.json');

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
function loadUsers() {
    if (!fs.existsSync(USERS_FILE)) {
        fs.writeFileSync(USERS_FILE, JSON.stringify({ users: [] }, null, 2));
    }
    return JSON.parse(fs.readFileSync(USERS_FILE));
}

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
function saveUsers(data) {
    fs.writeFileSync(USERS_FILE, JSON.stringify(data, null, 2));
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó
function loadBotData() {
    if (!fs.existsSync(BOTDATA_FILE)) {
        fs.writeFileSync(BOTDATA_FILE, JSON.stringify({}, null, 2));
    }
    return JSON.parse(fs.readFileSync(BOTDATA_FILE));
}

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó
function saveBotData(data) {
    fs.writeFileSync(BOTDATA_FILE, JSON.stringify(data, null, 2));
}

const usersData = loadUsers();
let botData = loadBotData();

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});
const PORT = 3005;

const prefix = "/";
const commands = {};
const commandDescriptions = [];
const commandUsage = {};

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå commands
const commandsPath = path.join(__dirname, 'commands');
if (fs.existsSync(commandsPath)) {
    fs.readdirSync(commandsPath).forEach((file) => {
        if (file.endsWith(".js")) {
            const command = require(path.join(commandsPath, file));
            if (command.config && command.config.name) {
                commands[command.config.name.toLowerCase()] = command;
                commandDescriptions.push({
                    name: command.config.name,
                    description: command.config.description || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢",
                });
                commandUsage[command.config.name.toLowerCase()] = 0;
                console.log(`üì¶ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${command.config.name}`);
            }
        }
    });
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå events
const events = {};
const eventsPath = path.join(__dirname, 'events');
if (fs.existsSync(eventsPath)) {
    fs.readdirSync(eventsPath).forEach((file) => {
        if (file.endsWith(".js")) {
            const event = require(path.join(eventsPath, file));
            if (event.config && event.config.eventType) {
                event.config.eventType.forEach((type) => {
                    if (!events[type]) events[type] = [];
                    events[type].push(event);
                });
                console.log(`üîî ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå: ${file}`);
            }
        }
    });
}

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));

app.use(session({
    secret: 'yoursecretkey', // ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á
    resave: false,
    saveUninitialized: false,
    cookie: { secure: false } // ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ HTTPS ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á secure: true
}));

// Middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
function checkAuth(req, res, next) {
    if (!req.session || !req.session.username) {
        return res.redirect('/login');
    }
    next();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
function generateBotDataForUser(username) {
    const userBots = botData[username] || {};
    const botSessions = userBots.bots || {};

    const totalBots = Object.keys(botSessions).length;
    const onlineBots = Object.values(botSessions).filter(bot => bot.status === 'online').length;
    const activeBots = Object.values(botSessions).filter(bot => bot.status === 'active').length;

    const botRows = Object.entries(botSessions).map(([token, bot]) => `
        <tr id="bot-${token}">
            <td>
                <i class="fas fa-robot me-2" style="color: var(--primary-color);"></i>
                ${bot.name}
            </td>
            <td>
                <span class="${bot.status === 'online' ? 'status-online' : 'status-offline'}">
                    <i class="fas fa-circle"></i>
                    ${bot.status === 'online' ? '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå' : '‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå'}
                </span>
                ${bot.status === 'offline' ? `<span class="countdown" id="countdown-${token}"> (‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß)</span>` : ''}
            </td>
            <td>
                <span class="runtime" data-start-time="${bot.startTime || ''}">
                    ${bot.startTime ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì...' : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°'}
                </span>
            </td>
            <td>
                <button class="btn btn-sm btn-warning" onclick="location.href='/edit-bot?token=${encodeURIComponent(token)}'">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô</button>
                <button class="btn btn-sm btn-danger" onclick="location.href='/delete-bot?token=${encodeURIComponent(token)}'">‡∏•‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô</button>
                ${bot.status === 'online' 
                    ? `<button class="btn btn-sm btn-secondary" onclick="location.href='/stop-bot?token=${encodeURIComponent(token)}'">‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</button>`
                    : `<button class="btn btn-sm btn-success" onclick="location.href='/restart-bot?token=${encodeURIComponent(token)}'">‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà</button>`
                }
            </td>
        </tr>
    `).join('') || `
        <tr>
            <td colspan="4" class="text-center">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</td>
        </tr>
    `;

    return { totalBots, onlineBots, activeBots, botRows };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
function generateCommandData() {
    const commandsData = Object.entries(commandUsage).map(([name, count]) => `
        <tr>
            <td>${prefix}${name}</td>
            <td>${count}</td>
        </tr>
    `).join('') || `
        <tr>
            <td colspan="2" class="text-center">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</td>
        </tr>
    `;

    return commandsData;
}

// ‡∏´‡∏ô‡πâ‡∏≤ Sign Up
app.get('/signup', (req, res) => {
    res.send(`
    <!DOCTYPE html>
    <html lang="th">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <title>‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å | ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <style>
            body {
                background: #0f0f0f;
                color: #fff;
                font-family: sans-serif;
                background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);
                min-height: 100vh;
                display: flex;
                justify-content: center;
                align-items: center;
            }
            .card {
                background: rgba(255,255,255,0.1);
                backdrop-filter: blur(10px);
                border: none;
                border-radius: 16px;
                padding: 20px;
            }
            .form-control {
                background: rgba(255,255,255,0.2);
                border: none;
                color: #fff;
            }
            .form-control:focus {
                box-shadow: 0 0 0 0.2rem rgba(13,110,253,0.25);
                border: none;
            }
            .btn-primary {
                background: #0d6efd;
                border: none;
            }
        </style>
    </head>
    <body>
        <div class="card text-white" style="max-width: 400px; width:100%;">
            <div class="card-body">
                <h3 class="mb-4 text-center">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h3>
                <form method="POST" action="/signup">
                    <div class="mb-3">
                        <label class="form-label">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</label>
                        <input type="text" name="username" class="form-control" required/>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</label>
                        <input type="password" name="password" class="form-control" required/>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</button>
                </form>
                <hr>
                <p class="text-center">‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡πâ‡∏ß? <a href="/login" style="color:#0d6efd;">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</a></p>
            </div>
        </div>
    </body>
    </html>
    `);
});

app.post('/signup', async (req, res) => {
    const { username, password } = req.body;
    const userExists = usersData.users.find(u => u.username === username);
    if (userExists) {
        return res.redirect('/signup?error=userexists');
    }

    const hash = await bcrypt.hash(password, 10);
    usersData.users.push({ username, passwordHash: hash });
    saveUsers(usersData);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    botData[username] = { bots: {} };
    saveBotData(botData);

    res.redirect('/login?success=signedup');
});

// ‡∏´‡∏ô‡πâ‡∏≤ Login
app.get('/login', (req, res) => {
    res.send(`
    <!DOCTYPE html>
    <html lang="th">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <title>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö | ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <style>
            body {
                background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);
                color: #fff;
                font-family: sans-serif;
                min-height: 100vh;
                display: flex;
                justify-content: center;
                align-items: center;
            }
            .card {
                background: rgba(255,255,255,0.1);
                backdrop-filter: blur(10px);
                border: none;
                border-radius: 16px;
                padding: 20px;
            }
            .form-control {
                background: rgba(255,255,255,0.2);
                border: none;
                color: #fff;
            }
            .form-control:focus {
                box-shadow: 0 0 0 0.2rem rgba(13,110,253,0.25);
                border: none;
            }
            .btn-primary {
                background: #0d6efd;
                border: none;
            }
        </style>
    </head>
    <body>
        <div class="card text-white" style="max-width: 400px; width:100%;">
            <div class="card-body">
                <h3 class="mb-4 text-center">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</h3>
                <form method="POST" action="/login">
                    <div class="mb-3">
                        <label class="form-label">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</label>
                        <input type="text" name="username" class="form-control" required/>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</label>
                        <input type="password" name="password" class="form-control" required/>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</button>
                </form>
                <hr>
                <p class="text-center">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ? <a href="/signup" style="color:#0d6efd;">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</a></p>
            </div>
        </div>
    </body>
    </html>
    `);
});

app.post('/login', async (req, res) => {
    const { username, password } = req.body;
    const user = usersData.users.find(u => u.username === username);
    if (!user) {
        return res.redirect('/login?error=nouser');
    }
    const match = await bcrypt.compare(password, user.passwordHash);
    if (!match) {
        return res.redirect('/login?error=wrongpass');
    }

    req.session.username = username;
    res.redirect('/');
});

// ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
app.get('/logout', (req, res) => {
    req.session.destroy(() => {
        res.redirect('/login');
    });
});

// ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏´‡∏•‡∏±‡∏Å
app.get("/", checkAuth, (req, res) => {
    const username = req.session.username;
    const { totalBots, onlineBots, activeBots, botRows } = generateBotDataForUser(username);

    res.send(`
        <!DOCTYPE html>
        <html lang="th">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏´‡∏•‡∏±‡∏Å | ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
            <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@400;600&family=Roboto:wght@400;500&display=swap" rel="stylesheet">
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
            <style>
                /* ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° */
                :root {
                    --primary-color: #0d6efd;
                    --secondary-color: #6c757d;
                    --accent-color: #198754;
                    --background-color: #121212;
                    --card-bg: rgba(255, 255, 255, 0.1);
                    --card-border: rgba(255, 255, 255, 0.2);
                    --text-color: #ffffff;
                    --success-color: #198754;
                    --error-color: #dc3545;
                    --info-color: #0d6efd;
                }

                body {
                    background: var(--background-color);
                    color: var(--text-color);
                    font-family: 'Roboto', sans-serif;
                    min-height: 100vh;
                    position: relative;
                    overflow-x: hidden;
                    background: linear-gradient(to bottom right, #000000, #0f0f0f, #171717);
                }

                .navbar {
                    background: rgba(0, 0, 0, 0.8);
                    border-bottom: 2px solid var(--primary-color);
                }

                .navbar-brand {
                    font-family: 'Kanit', sans-serif;
                    font-weight: 600;
                    color: var(--text-color) !important;
                }

                .stats-card {
                    background: var(--card-bg);
                    border: 1px solid var(--card-border);
                    border-radius: 12px;
                    padding: 20px;
                    text-align: center;
                    transition: transform 0.3s ease, box-shadow 0.3s ease;
                }

                .stats-card:hover {
                    transform: translateY(-5px);
                    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
                }

                .stats-number {
                    font-size: 2.5rem;
                    font-weight: 700;
                    margin: 10px 0;
                    color: var(--primary-color);
                }

                .glass-card {
                    background: var(--card-bg);
                    border: 1px solid var(--card-border);
                    border-radius: 16px;
                    padding: 24px;
                    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
                    transition: transform 0.3s ease, box-shadow 0.3s ease;
                }

                .glass-card:hover {
                    transform: translateY(-5px);
                    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);
                }

                table {
                    width: 100%;
                    border-collapse: collapse;
                    margin-top: 20px;
                }

                th, td {
                    padding: 12px 15px;
                    text-align: left;
                }

                th {
                    background-color: var(--primary-color);
                    color: #fff;
                    font-weight: 600;
                }

                tr:nth-child(even) {
                    background-color: rgba(13, 110, 253, 0.05);
                }

                .status-online {
                    background: var(--success-color);
                    color: #ffffff;
                    padding: 5px 10px;
                    border-radius: 20px;
                    font-size: 0.9rem;
                }

                .status-offline {
                    background: var(--error-color);
                    color: #ffffff;
                    padding: 5px 10px;
                    border-radius: 20px;
                    font-size: 0.9rem;
                }

                .footer {
                    background: rgba(0, 0, 0, 0.8);
                    border-top: 2px solid var(--primary-color);
                    padding: 20px 0;
                    margin-top: 40px;
                    font-size: 0.9rem;
                    color: var(--text-color);
                    position: relative;
                }

                .runtime {
                    color: var(--info-color);
                }

                .btn {
                    border-radius: 8px;
                    margin-right: 5px;
                    margin-bottom: 5px;
                }

                @media (max-width: 768px) {
                    .stats-card {
                        margin-bottom: 20px;
                    }
                }
            </style>
        </head>
        <body>
            <nav class="navbar navbar-expand-lg navbar-dark mb-4">
                <div class="container">
                    <a class="navbar-brand d-flex align-items-center" href="/">
                        <i class="fas fa-robot fa-lg me-2" style="color: var(--primary-color);"></i>
                        ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó
                    </a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarNav">
                        <ul class="navbar-nav ms-auto">
                            <li class="nav-item"><a class="nav-link" href="/start"><i class="fas fa-plus-circle me-1"></i> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó</a></li>
                            <li class="nav-item"><a class="nav-link" href="/bots"><i class="fas fa-list me-1"></i> ‡∏î‡∏π‡∏ö‡∏≠‡∏ó‡∏£‡∏±‡∏ô</a></li>
                            <li class="nav-item"><a class="nav-link" href="/commands"><i class="fas fa-terminal me-1"></i> ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</a></li>
                            <li class="nav-item"><a class="nav-link" href="/logout"><i class="fas fa-sign-out-alt me-1"></i> ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</a></li>
                        </ul>
                    </div>
                </div>
            </nav>

            <div class="container">
                <div class="row mb-4">
                    <div class="col-md-4 col-sm-6 mb-3">
                        <div class="stats-card">
                            <i class="fas fa-robot fa-2x mb-3" style="color: var(--primary-color);"></i>
                            <div class="stats-number" id="totalBots">${totalBots}</div>
                            <div class="stats-label">‡∏ö‡∏≠‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</div>
                        </div>
                    </div>
                    <div class="col-md-4 col-sm-6 mb-3">
                        <div class="stats-card">
                            <i class="fas fa-signal fa-2x mb-3" style="color: var(--info-color);"></i>
                            <div class="stats-number" id="onlineBots">${onlineBots}</div>
                            <div class="stats-label">‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</div>
                        </div>
                    </div>
                    <div class="col-md-4 col-sm-6 mb-3">
                        <div class="stats-card">
                            <i class="fas fa-clock fa-2x mb-3" style="color: var(--secondary-color);"></i>
                            <div class="stats-number" id="activeBots">${activeBots}</div>
                            <div class="stats-label">‡∏ö‡∏≠‡∏ó‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</div>
                        </div>
                    </div>
                </div>
                <div class="glass-card">
                    <h5 class="mb-4">
                        <i class="fas fa-robot me-2" style="color: var(--primary-color);"></i>
                        ‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
                    </h5>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó</th>
                                    <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                                    <th>‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô</th>
                                    <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                                </tr>
                            </thead>
                            <tbody id="botTableBody">
                                ${botRows}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <footer class="footer text-center">
                <div class="container">
                    <p class="mb-0">¬© ${new Date().getFullYear()} ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó | ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ‚ù§Ô∏è</p>
                </div>
            </footer>

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
            <script src="/socket.io/socket.io.js"></script>
            <script>
                const socket = io();
                function updateRuntime() {
                    const runtimeElements = document.querySelectorAll('.runtime');
                    const now = Date.now();
                    runtimeElements.forEach(el => {
                        const startTime = parseInt(el.getAttribute('data-start-time'));
                        if (!startTime) {
                            el.textContent = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°";
                            return;
                        }
                        const elapsed = now - startTime;
                        const seconds = Math.floor((elapsed / 1000) % 60);
                        const minutes = Math.floor((elapsed / (1000 * 60)) % 60);
                        const hours = Math.floor((elapsed / (1000 * 60 * 60)) % 24);
                        const days = Math.floor(elapsed / (1000 * 60 * 60 * 24));
                        el.textContent = \`\${days} ‡∏ß‡∏±‡∏ô \${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á \${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ \${seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\`;
                    });
                }
                setInterval(updateRuntime, 1000);
                document.addEventListener('DOMContentLoaded', updateRuntime);
            </script>
        </body>
        </html>
    `);
});

// ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó
app.get("/start", checkAuth, (req, res) => {
    res.send(`
        <!DOCTYPE html>
        <html lang="th">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó | ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
            <style>
                body {
                    background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);
                    min-height: 100vh;
                    color: #fff;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                }
                .card {
                    background: rgba(255,255,255,0.1);
                    border: none;
                    border-radius: 16px;
                    padding: 20px;
                    width: 400px;
                    max-width: 90%;
                    backdrop-filter: blur(10px);
                }
                .form-control {
                    background: rgba(255,255,255,0.2);
                    border: none;
                    color: #fff;
                }
                .btn-primary {
                    background: #0d6efd;
                    border: none;
                }
            </style>
        </head>
        <body>
            <div class="card">
                <h5 class="mb-4 text-center">
                    <i class="fas fa-plus-circle me-2" style="color:#0d6efd;"></i>
                    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡πÉ‡∏´‡∏°‡πà
                </h5>
                <form method="POST" action="/start">
                    <div class="mb-3">
                        <label class="form-label">‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</label>
                        <textarea 
                            id="token" 
                            name="token" 
                            class="form-control" 
                            rows="4" 
                            placeholder='{"appState": "YOUR_APP_STATE"}' 
                            required
                        ></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-play me-2"></i> ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó
                    </button>
                </form>
                <hr>
                <div class="text-center">
                    <a href="/" class="text-decoration-none" style="color:#0d6efd;">‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</a>
                </div>
            </div>
        </body>
        </html>
    `);
});

app.post('/start', checkAuth, async (req, res) => {
    const username = req.session.username;
    const tokenInput = req.body.token.trim();

    if (!botData[username]) {
        botData[username] = { bots: {} };
    }

    if (botData[username].bots[tokenInput]) {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ö‡∏≠‡∏ó‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (token ‡∏ô‡∏µ‡πâ) ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏£‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        return res.redirect('/start?error=already-running');
    }

    const botCount = Object.keys(botData[username].bots).length + 1;
    const botName = `Bot ${botCount}`;
    const startTime = Date.now();

    try {
        const appState = JSON.parse(tokenInput);
        await startBot(username, appState, tokenInput, botName, startTime);
        res.redirect('/bots');
        io.emit('updateBots', {}); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    } catch (err) {
        console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó: ${err.message}`));
        res.redirect('/start?error=invalid-token');
    }
});

// ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏≠‡∏ó‡∏£‡∏±‡∏ô
app.get("/bots", checkAuth, (req, res) => {
    const username = req.session.username;
    const { totalBots, onlineBots, activeBots, botRows } = generateBotDataForUser(username);

    res.send(`
        <!DOCTYPE html>
        <html lang="th">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>‡∏î‡∏π‡∏ö‡∏≠‡∏ó‡∏£‡∏±‡∏ô | ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
            <style>
                body {
                    background: linear-gradient(to bottom right, #000000, #0f0f0f, #171717);
                    color: #fff;
                    font-family: sans-serif;
                    min-height: 100vh;
                }
                .navbar {
                    background: rgba(0,0,0,0.8);
                    border-bottom: 2px solid #0d6efd;
                }
                .navbar-brand {
                    font-weight: 600;
                }
                .glass-card {
                    background: rgba(255,255,255,0.1);
                    border: 1px solid rgba(255,255,255,0.2);
                    border-radius: 16px;
                    padding: 24px;
                    box-shadow: 0 8px 16px rgba(0,0,0,0.1);
                }
                table {
                    width: 100%;
                    border-collapse: collapse;
                    margin-top: 20px;
                }
                th, td {
                    padding: 12px 15px;
                    text-align: left;
                }
                th {
                    background-color: #0d6efd;
                    color: #fff;
                    font-weight: 600;
                }
                tr:nth-child(even) {
                    background-color: rgba(13,110,253,0.05);
                }
                .status-online {
                    background: #198754;
                    color: #fff;
                    padding: 5px 10px;
                    border-radius: 20px;
                    font-size: 0.9rem;
                }
                .status-offline {
                    background: #dc3545;
                    color: #fff;
                    padding: 5px 10px;
                    border-radius: 20px;
                    font-size: 0.9rem;
                }
                .btn {
                    border-radius: 8px;
                    margin-right: 5px;
                    margin-bottom: 5px;
                }
            </style>
        </head>
        <body>
            <nav class="navbar navbar-expand-lg navbar-dark mb-4">
                <div class="container">
                    <a class="navbar-brand d-flex align-items-center" href="/">
                        <i class="fas fa-robot fa-lg me-2" style="color:#0d6efd;"></i>
                        ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó
                    </a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarNav">
                        <ul class="navbar-nav ms-auto">
                            <li class="nav-item"><a class="nav-link" href="/start"><i class="fas fa-plus-circle me-1"></i> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó</a></li>
                            <li class="nav-item"><a class="nav-link active" href="/bots"><i class="fas fa-list me-1"></i> ‡∏î‡∏π‡∏ö‡∏≠‡∏ó‡∏£‡∏±‡∏ô</a></li>
                            <li class="nav-item"><a class="nav-link" href="/commands"><i class="fas fa-terminal me-1"></i> ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</a></li>
                            <li class="nav-item"><a class="nav-link" href="/logout"><i class="fas fa-sign-out-alt me-1"></i> ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</a></li>
                        </ul>
                    </div>
                </div>
            </nav>
            <div class="container">
                <div class="glass-card">
                    <h5 class="mb-4">
                        <i class="fas fa-list me-2" style="color:#0d6efd;"></i>
                        ‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
                    </h5>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó</th>
                                    <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                                    <th>‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô</th>
                                    <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${botRows}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        </body>
        </html>
    `);
});

// ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
app.get("/commands", checkAuth, (req, res) => {
    const commandsData = generateCommandData();
    res.send(`
        <!DOCTYPE html>
        <html lang="th">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ | ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
            <style>
                body {
                    background: linear-gradient(to bottom right, #000000, #0f0f0f, #171717);
                    color: #fff;
                    font-family: sans-serif;
                    min-height: 100vh;
                }
                .navbar {
                    background: rgba(0,0,0,0.8);
                    border-bottom: 2px solid #0d6efd;
                }
                .glass-card {
                    background: rgba(255,255,255,0.1);
                    border: 1px solid rgba(255,255,255,0.2);
                    border-radius: 16px;
                    padding: 24px;
                }
                table {
                    width: 100%;
                    border-collapse: collapse;
                    margin-top: 20px;
                }
                th, td {
                    padding: 12px 15px;
                    text-align: left;
                }
                th {
                    background-color: #0d6efd;
                    color: #fff;
                    font-weight: 600;
                }
                tr:nth-child(even) {
                    background-color: rgba(13,110,253,0.05);
                }
            </style>
        </head>
        <body>
            <nav class="navbar navbar-expand-lg navbar-dark mb-4">
                <div class="container">
                    <a class="navbar-brand" href="/">
                        <i class="fas fa-robot fa-lg me-2" style="color:#0d6efd;"></i>
                        ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó
                    </a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarNav">
                        <ul class="navbar-nav ms-auto">
                            <li class="nav-item"><a class="nav-link" href="/start"><i class="fas fa-plus-circle me-1"></i> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó</a></li>
                            <li class="nav-item"><a class="nav-link" href="/bots"><i class="fas fa-list me-1"></i> ‡∏î‡∏π‡∏ö‡∏≠‡∏ó‡∏£‡∏±‡∏ô</a></li>
                            <li class="nav-item"><a class="nav-link active" href="/commands"><i class="fas fa-terminal me-1"></i> ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</a></li>
                            <li class="nav-item"><a class="nav-link" href="/logout"><i class="fas fa-sign-out-alt me-1"></i> ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</a></li>
                        </ul>
                    </div>
                </div>
            </nav>
            <div class="container">
                <div class="glass-card">
                    <h5 class="mb-4">
                        <i class="fas fa-terminal me-2"></i> ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
                    </h5>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á</th>
                                    <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${commandsData}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        </body>
        </html>
    `);
});

// ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô
app.get('/edit-bot', checkAuth, (req, res) => {
    const username = req.session.username;
    const { token } = req.query;
    const userBots = botData[username]?.bots || {};
    if (!userBots[token]) {
        return res.redirect('/bots');
    }

    res.send(`
    <!DOCTYPE html>
    <html lang="th">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô | ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <style>
            body {
                background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);
                min-height: 100vh;
                color: #fff;
                display: flex;
                justify-content: center;
                align-items: center;
            }
            .card {
                background: rgba(255,255,255,0.1);
                border: none;
                border-radius: 16px;
                padding: 20px;
                width: 400px;
                max-width: 90%;
                backdrop-filter: blur(10px);
            }
            .form-control {
                background: rgba(255,255,255,0.2);
                border: none;
                color: #fff;
            }
            .btn-primary {
                background: #0d6efd;
                border: none;
            }
        </style>
    </head>
    <body>
        <div class="card">
            <h5 class="mb-4 text-center">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô</h5>
            <form method="POST" action="/edit-bot">
                <div class="mb-3">
                    <label class="form-label">‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà</label>
                    <textarea name="newToken" class="form-control" rows="4" required>${token}</textarea>
                </div>
                <input type="hidden" name="oldToken" value="${token}" />
                <button type="submit" class="btn btn-primary w-100">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            </form>
            <hr>
            <div class="text-center">
                <a href="/bots" class="text-decoration-none" style="color:#0d6efd;">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</a>
            </div>
        </div>
    </body>
    </html>
    `);
});

app.post('/edit-bot', checkAuth, async (req, res) => {
    const username = req.session.username;
    const { oldToken, newToken } = req.body;
    const userBots = botData[username]?.bots || {};

    if (!userBots[oldToken]) {
        return res.redirect('/bots');
    }

    // ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏≤‡πÉ‡∏ä‡πâ token ‡πÉ‡∏´‡∏°‡πà
    const botInfo = userBots[oldToken];
    delete userBots[oldToken];
    userBots[newToken] = botInfo;

    // ‡∏ñ‡πâ‡∏≤‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏≠‡∏¢‡∏π‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ token ‡πÉ‡∏´‡∏°‡πà
    if (botInfo.status === 'online') {
        // ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏≠‡∏ó‡πÄ‡∏Å‡πà‡∏≤
        if (botInfo.api && botInfo.api.logout) {
            botInfo.api.logout();
        }
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        try {
            const appState = JSON.parse(newToken);
            await startBot(username, appState, newToken, botInfo.name, botInfo.startTime || Date.now());
        } catch (err) {
            console.error("Error restarting bot with new token", err);
            // ‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏´‡∏¢‡∏∏‡∏î‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
            userBots[newToken].status = 'offline';
        }
    }

    botData[username].bots = userBots;
    saveBotData(botData);
    res.redirect('/bots');
});

// ‡∏•‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô‡∏ö‡∏≠‡∏ó
app.get('/delete-bot', checkAuth, (req, res) => {
    const username = req.session.username;
    const { token } = req.query;
    const userBots = botData[username]?.bots || {};
    if (!userBots[token]) {
        return res.redirect('/bots');
    }
    // ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏≠‡∏ó‡∏Å‡πà‡∏≠‡∏ô
    if (userBots[token].api && userBots[token].status === 'online') {
        userBots[token].api.logout();
    }
    delete userBots[token];
    botData[username].bots = userBots;
    saveBotData(botData);
    res.redirect('/bots');
});

// ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó
app.get('/stop-bot', checkAuth, (req, res) => {
    const username = req.session.username;
    const { token } = req.query;
    const userBots = botData[username]?.bots || {};
    if (!userBots[token]) {
        return res.redirect('/bots');
    }
    if (userBots[token].api && userBots[token].status === 'online') {
        userBots[token].api.logout();
        userBots[token].status = 'offline';
        saveBotData(botData);
    }
    res.redirect('/bots');
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡πÉ‡∏´‡∏°‡πà
app.get('/restart-bot', checkAuth, async (req, res) => {
    const username = req.session.username;
    const { token } = req.query;
    const userBots = botData[username]?.bots || {};
    if (!userBots[token]) {
        return res.redirect('/bots');
    }

    const botInfo = userBots[token];
    try {
        const appState = JSON.parse(token);
        await startBot(username, appState, token, botInfo.name, botInfo.startTime || Date.now());
    } catch (err) {
        console.error("Error restarting bot", err);
    }

    res.redirect('/bots');
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó
async function startBot(username, appState, token, name, startTime) {
    return new Promise((resolve, reject) => {
        login({ appState }, (err, api) => {
            if (err) {
                console.error(chalk.red(`‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô: ${token}`));
                return reject(err);
            }

            if (!botData[username]) botData[username] = { bots: {} };
            const userBots = botData[username].bots || {};

            userBots[token] = {
                api,
                name,
                startTime,
                status: 'online'
            };
            botData[username].bots = userBots;
            saveBotData(botData);

            console.log(chalk.green(figlet.textSync("Bot Started!", { horizontalLayout: "full" })));
            console.log(chalk.green(`‚úÖ ${name} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô: ${token}`));

            api.setOptions({ listenEvents: true });

            api.listenMqtt(async (err, event) => {
                if (err) {
                    console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err}`));
                    userBots[token].status = 'offline';
                    botData[username].bots = userBots;
                    saveBotData(botData);
                    return;
                }

                // Log Event
                // console.log(chalk.blue(`üì© ‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå: ${event.type}`));

                // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå
                if (event.logMessageType && events[event.logMessageType]) {
                    for (const eventHandler of events[event.logMessageType]) {
                        try {
                            await eventHandler.run({ api, event });
                            // console.log(chalk.blue(`üîÑ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå: ${eventHandler.config.name}`));
                        } catch (error) {
                            console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå ${eventHandler.config.name}:`, error));
                        }
                    }
                }

                // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                if (event.type === "message") {
                    const message = event.body ? event.body.trim() : "";
                    if (!message.startsWith(prefix)) return;

                    const args = message.slice(prefix.length).trim().split(/ +/);
                    const commandName = args.shift().toLowerCase();
                    const command = commands[commandName];

                    if (command && typeof command.run === "function") {
                        try {
                            await command.run({ api, event, args });
                            // console.log(chalk.green(`‚úÖ ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${commandName}`));
                            commandUsage[commandName] = (commandUsage[commandName] || 0) + 1;
                        } catch (error) {
                            console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ${commandName}:`, error));
                            api.sendMessage("‚ùó ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", event.threadID);
                        }
                    } else {
                        api.sendMessage("‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏", event.threadID);
                    }
                }
            });

            resolve();
        });
    });
}

// Socket.io (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏î‡πâ)
io.on('connection', (socket) => {
    console.log(chalk.blue('üîå Socket.io client connected'));
    socket.on('disconnect', () => {
        console.log(chalk.red('üîå Socket.io client disconnected'));
    });
});

server.listen(PORT, () => {
    console.log(chalk.blue(`üåê ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà http://localhost:${PORT}`));
    console.log(chalk.green(figlet.textSync("Bot Management", { horizontalLayout: "full" })));
});
