const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');
const stringSimilarity = require('string-similarity');
const ytdl = require('@distube/ytdl-core');
const yts = require('yt-search');

module.exports = {
    config: {
        name: '‡πÄ‡∏à‡∏≠‡πÑ‡∏ô‡∏ó‡πå',
        description: '‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡∏≠‡πÑ‡∏ô‡∏ó‡πå, ‡∏Ç‡∏≠‡πÄ‡∏û‡∏•‡∏á ‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
        usage: '‡πÄ‡∏à‡∏≠‡πÑ‡∏ô‡∏ó‡πå [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°] ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏à‡∏≠‡πÑ‡∏ô‡∏ó‡πå ‡πÄ‡∏û‡∏•‡∏á [‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á] ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏à‡∏≠‡πÑ‡∏ô‡∏ó‡πå ‡∏Ç‡∏≠‡∏£‡∏π‡∏õ‡∏´‡∏µ',
    },
    run: async ({ api, event, args }) => {
        const command = args.join(' ').trim();
        const firebaseURL = "https://goak-71ac8-default-rtdb.firebaseio.com/responses.json";

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "‡∏Ç‡∏≠‡∏£‡∏π‡∏õ"
        if (command.startsWith('‡∏Ç‡∏≠‡∏£‡∏π‡∏õ‡∏´‡∏µ') || command.startsWith('‡∏£‡∏π‡∏õ‡∏™‡∏≤‡∏ß')) {
            try {
                const response = await axios.get('https://api.sumiproject.net/images/lon');
                if (response.data && response.data.url) {
                    const imageUrl = response.data.url;

                    // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                    const imagePath = path.join(__dirname, 'cache', `image-${Date.now()}.jpg`);
                    const writer = fs.createWriteStream(imagePath);
                    const downloadResponse = await axios({
                        url: imageUrl,
                        method: 'GET',
                        responseType: 'stream',
                    });
                    downloadResponse.data.pipe(writer);

                    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
                    await new Promise((resolve, reject) => {
                        writer.on('finish', resolve);
                        writer.on('error', reject);
                    });

                    // ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                    const message = {
                        body: `üé® ‡πÄ‡∏à‡∏≠‡πÑ‡∏ô‡∏ó‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß!`,
                        attachment: fs.createReadStream(imagePath),
                    };

                    api.sendMessage(message, event.threadID, () => {
                        fs.unlinkSync(imagePath); // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    });
                } else {
                    return api.sendMessage("‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", event.threadID);
                }
            } catch (error) {
                console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:", error.message || error);
                return api.sendMessage("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", event.threadID);
            }
            return;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "‡πÄ‡∏û‡∏•‡∏á"
        if (command.startsWith('‡πÄ‡∏û‡∏•‡∏á') || command.startsWith('‡∏Ç‡∏≠‡πÄ‡∏û‡∏•‡∏á') || command.startsWith('‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á')) {
            const songName = command.replace(/^(‡πÄ‡∏û‡∏•‡∏á|‡∏Ç‡∏≠‡πÄ‡∏û‡∏•‡∏á|‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á)/, '').trim();

            if (!songName) {
                return api.sendMessage("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á ‡πÄ‡∏ä‡πà‡∏ô '‡πÄ‡∏à‡∏≠‡πÑ‡∏ô‡∏ó‡πå ‡πÄ‡∏û‡∏•‡∏á ‡∏£‡∏±‡∏Å‡πÄ‡∏ò‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à'", event.threadID, event.messageID);
            }

            const tempDir = path.join(__dirname, "cache");
            if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir);

            try {
                const searchingMessage = await api.sendMessage(`‚åõ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á üîé "${songName}"`, event.threadID);

                const searchResults = await yts(songName);
                if (!searchResults.videos || searchResults.videos.length === 0) {
                    return api.sendMessage("‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", event.threadID, event.messageID);
                }

                const video = searchResults.videos[0];
                const videoUrl = video.url;
                const videoTitle = video.title;
                const videoAuthor = video.author.name;
                const filePath = path.join(tempDir, `music-${Date.now()}.mp3`);

                const stream = ytdl(videoUrl, { filter: "audioonly" });
                const writeStream = fs.createWriteStream(filePath);
                stream.pipe(writeStream);

                stream.on("end", async () => {
                    await api.unsendMessage(searchingMessage.messageID);

                    if (fs.statSync(filePath).size > 26214400) { // 25MB
                        fs.unlinkSync(filePath);
                        return api.sendMessage("‚ùó ‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô 25MB ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ", event.threadID, event.messageID);
                    }

                    const message = {
                        body: `üéµ **‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á**: ${videoTitle}\nüé§ **‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô**: ${videoAuthor}`,
                        attachment: fs.createReadStream(filePath),
                    };

                    api.sendMessage(message, event.threadID, () => {
                        fs.unlinkSync(filePath);
                    });
                });

                stream.on("error", (error) => {
                    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏•‡∏á:", error);
                    api.sendMessage("‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏•‡∏á", event.threadID, event.messageID);
                    if (fs.existsSync(filePath)) fs.unlinkSync(filePath);
                });
            } catch (error) {
                console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
                api.sendMessage("‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏•‡∏á", event.threadID, event.messageID);
            }
            return;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        try {
            const response = await axios.get(firebaseURL);
            const data = response.data;

            if (data) {
                const questions = Object.keys(data);
                const bestMatch = stringSimilarity.findBestMatch(command, questions);

                if (bestMatch.bestMatch.rating > 0.6) {
                    const matchedQuestion = bestMatch.bestMatch.target;
                    const answers = data[matchedQuestion];

                    const botResponse = Array.isArray(answers)
                        ? answers[Math.floor(Math.random() * answers.length)]
                        : answers;

                    return api.sendMessage(
                        `üéÑ ‡πÄ‡∏à‡∏≠‡πÑ‡∏ô‡∏ó‡πå: ${botResponse}`,
                        event.threadID
                    );
                }
            }

            return api.sendMessage(
                `üéÖ ‡πÄ‡∏à‡∏≠‡πÑ‡∏ô‡∏ó‡πå: ‡∏ú‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ üéÅ\nüéÄ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ô‡∏ú‡∏°‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: "‡πÄ‡∏à‡∏≠‡πÑ‡∏ô‡∏ó‡πå ‡∏™‡∏≠‡∏ô [‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°] = [‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö]"`,
                event.threadID
            );
        } catch (error) {
            console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error.message || error);
            return api.sendMessage(
                `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á üéÑ`,
                event.threadID
            );
        }
    },
};
