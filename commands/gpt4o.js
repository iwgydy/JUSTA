const axios = require("axios");
const fs = require("fs");
const path = require("path");

module.exports = {
    config: {
        name: "gpt4o",
        description: "‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö GPT-4O ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö",
    },
    run: async ({ api, event, args }) => {
        const query = args.join(" ");
        if (!query) {
            return api.sendMessage("‚õî ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏° GPT-4O", event.threadID);
        }

        const apiUrl = `https://kaiz-apis.gleeze.com/api/gpt-4o-pro?q=${encodeURIComponent(query)}&uid=1&imageUrl=`;
        const startTime = Date.now();

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        let statusMsg = null;
        try {
            statusMsg = await api.sendMessage("‚öôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£... ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‚è≥", event.threadID);
            console.log("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á:", statusMsg);
        } catch (err) {
            console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ:", err);
            return;
        }

        try {
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
            const response = await axios.get(apiUrl);
            const data = response.data;

            const endTime = Date.now();
            const processingTime = ((endTime - startTime) / 1000).toFixed(2);
            const rightAlignedTime = `üïí ${processingTime}`;

            if (data && data.response) {
                let imageUrl = null;

                if (data.imageUrl) {
                    imageUrl = data.imageUrl;
                } else {
                    const imageRegex = /!ÓÄÅ.*?ÓÄÅÓÄÅ(https?:\/\/.*?)ÓÄÅ/;
                    const match = imageRegex.exec(data.response);
                    if (match && match[1]) {
                        imageUrl = match[1];
                    }
                }

                if (imageUrl) {
                    const imagePath = path.join(__dirname, `../../temp/${Date.now()}.jpg`);

                    const writer = fs.createWriteStream(imagePath);
                    const imageResponse = await axios({
                        url: imageUrl,
                        method: "GET",
                        responseType: "stream",
                    });

                    imageResponse.data.pipe(writer);
                    await new Promise((resolve, reject) => {
                        writer.on("finish", resolve);
                        writer.on("error", reject);
                    });

                    // ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                    await api.sendMessage(
                        {
                            body: `${rightAlignedTime}\n\n‚ú® GPT-4O ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö:`,
                            attachment: fs.createReadStream(imagePath),
                        },
                        event.threadID
                    );

                    fs.unlinkSync(imagePath);
                } else {
                    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
                    const cleanedResponse = data.response.replace(/TOOL_CALL:.*?\n/g, "").trim();
                    await api.sendMessage(`${rightAlignedTime}\n\n‚ú® GPT-4O ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö:\n${cleanedResponse}`, event.threadID);
                }
            } else {
                await api.sendMessage(`${rightAlignedTime}\n\n‚ùó ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å GPT-4O ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ`, event.threadID);
            }
        } catch (error) {
            console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•:", error);
            const endTime = Date.now();
            const processingTime = ((endTime - startTime) / 1000).toFixed(2);
            const rightAlignedTime = `üïí ${processingTime}`;
            await api.sendMessage(`${rightAlignedTime}\n\n‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•`, event.threadID);
        } finally {
            // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            if (statusMsg && statusMsg.messageID) {
                try {
                    await api.deleteMessage(statusMsg.messageID);
                    console.log("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
                } catch (err) {
                    console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ:", err);
                }
            } else {
                console.warn("‡πÑ‡∏°‡πà‡∏û‡∏ö messageID ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞");
            }
        }
    },
};
