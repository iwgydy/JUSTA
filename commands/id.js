module.exports.config = {
  name: "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏¥‡πä‡∏Å‡∏ï‡∏≠‡∏Å",
  version: "1.0.0",
  description: "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ TikTok ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡∏ô‡πâ‡∏≥",
  commandCategory: "video",
  usages: "[‡∏•‡∏¥‡∏á‡∏Å‡πå TikTok]",
  cooldowns: 10,
};

module.exports.run = async ({ api, event, args }) => {
  const https = require("https");
  const fs = require("fs");
  const path = require("path");

  const videoUrl = args.join(" ");
  if (!videoUrl || !videoUrl.includes("tiktok.com")) {
    return api.sendMessage(
      "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå TikTok ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏¥‡πä‡∏Å‡∏ï‡∏≠‡∏Å https://www.tiktok.com/@user/video/123456789",
      event.threadID,
      event.messageID
    );
  }

  const options = {
    method: "GET",
    hostname: "tiktok-video-downloader-api.p.rapidapi.com",
    path: `/media?videoUrl=${encodeURIComponent(videoUrl)}`,
    headers: {
      "x-rapidapi-key": "d135e7c350msh72a1738fece929ap11d731jsn0012262e1cd5",
      "x-rapidapi-host": "tiktok-video-downloader-api.p.rapidapi.com",
    },
  };

  const startTime = Date.now();

  try {
    api.sendMessage(`‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤...`, event.threadID, event.messageID);

    const req = https.request(options, function (res) {
      const chunks = [];
      res.on("data", (chunk) => chunks.push(chunk));
      res.on("end", async () => {
        const body = JSON.parse(Buffer.concat(chunks).toString());

        if (!body.data || !body.data.play) {
          return api.sendMessage("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà!", event.threadID, event.messageID);
        }

        const videoLink = body.data.play;
        const filePath = path.join(__dirname, "cache", `tiktok_${Date.now()}.mp4`);

        // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        const file = fs.createWriteStream(filePath);
        https.get(videoLink, (response) => {
          response.pipe(file);
          file.on("finish", () => {
            file.close();

            const endTime = Date.now();
            const timeTaken = ((endTime - startTime) / 1000).toFixed(2);

            const message = {
              body: `üé• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!\n‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: ${timeTaken} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n\nüìå ‡∏•‡∏¥‡∏á‡∏Å‡πå: ${videoUrl}`,
              attachment: fs.createReadStream(filePath),
            };

            api.sendMessage(message, event.threadID, () => fs.unlinkSync(filePath), event.messageID);
          });
        });
      });
    });

    req.on("error", (error) => {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
      api.sendMessage("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠!", event.threadID, event.messageID);
    });

    req.end();
  } catch (error) {
    console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    api.sendMessage("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á!", event.threadID, event.messageID);
  }
};
