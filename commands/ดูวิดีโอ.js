const axios = require("axios");
const fs = require("fs");
const path = require("path");
const { exec } = require("child_process");

module.exports = {
    config: {
        name: "‡∏î‡∏π‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏¢‡∏π‡∏ó‡∏π‡∏õ",
        description: "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ YouTube ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå",
        usage: "!‡∏î‡∏π‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏¢‡∏π‡∏ó‡∏π‡∏õ <‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠>",
        permissions: "everyone",
    },
    run: async ({ api, event, args }) => {
        if (args.length < 1) {
            return api.sendMessage(
                "‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: !‡∏î‡∏π‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏¢‡∏π‡∏ó‡∏π‡∏õ ‡∏õ‡∏£‡∏≤‡∏£‡∏ñ‡∏ô‡∏≤‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡∏§‡πÖ",
                event.threadID,
                event.messageID
            );
        }

        const query = args.join(" ");
        const apiUrl = `https://nethwieginedev.vercel.app/api/ytsearch3?name=${encodeURIComponent(query)}`;
        const downloadsDir = path.join(__dirname, "../../downloads");

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå downloads
        if (!fs.existsSync(downloadsDir)) {
            fs.mkdirSync(downloadsDir, { recursive: true });
        }

        try {
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
            const response = await axios.get(apiUrl);
            const videos = response.data.result;

            if (!videos || videos.length === 0) {
                return api.sendMessage(
                    "‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
                    event.threadID,
                    event.messageID
                );
            }

            // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
            const video = videos[0];
            const videoUrl = video.url;
            const videoPath = path.join(downloadsDir, `${video.id}.mp4`);

            // ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
            api.sendMessage(
                `üé¨ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠: ${video.title}\n‚è±Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: ${video.duration}`,
                event.threadID,
                event.messageID
            );

            // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ yt-dlp
            await downloadYouTubeVideo(videoUrl, videoPath);

            // ‡∏™‡πà‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
            api.sendMessage(
                {
                    body: `üé¨ ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠: ${video.title}`,
                    attachment: fs.createReadStream(videoPath),
                },
                event.threadID,
                () => {
                    // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
                    fs.unlinkSync(videoPath);
                }
            );
        } catch (error) {
            console.error("‚ùå Error:", error.message);
            return api.sendMessage(
                "‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠",
                event.threadID,
                event.messageID
            );
        }
    },
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ yt-dlp
function downloadYouTubeVideo(url, output) {
    return new Promise((resolve, reject) => {
        const command = `yt-dlp -o "${output}" ${url}`;
        exec(command, (error, stdout, stderr) => {
            if (error) {
                console.error("‚ùå Error running yt-dlp:", stderr);
                return reject(new Error("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"));
            }
            resolve(output);
        });
    });
}
