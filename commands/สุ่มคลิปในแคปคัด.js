const axios = require("axios");
const fs = require("fs");
const path = require("path");

module.exports = {
    config: {
        name: "/‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏•‡∏¥‡∏õCapCut", // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö "/"
        description: "‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å CapCut API",
        usage: "/‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏•‡∏¥‡∏õCapCut",
        permissions: "everyone",
    },
    run: async ({ api, event }) => {
        const apiUrl = "https://apis-david-mp-momn.onrender.com/api/edit";
        const downloadsDir = path.join(__dirname, "../../downloads");

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå downloads ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
        if (!fs.existsSync(downloadsDir)) {
            fs.mkdirSync(downloadsDir, { recursive: true });
        }

        try {
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏¥‡∏õ‡∏à‡∏≤‡∏Å API
            const response = await axios.get(apiUrl);
            const clips = response.data;

            if (!clips || clips.length === 0) {
                return api.sendMessage(
                    "‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏•‡∏¥‡∏õ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ",
                    event.threadID,
                    event.messageID
                );
            }

            // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏•‡∏¥‡∏õ
            const randomClip = clips[Math.floor(Math.random() * clips.length)];

            if (!randomClip.video || !randomClip.title) {
                return api.sendMessage(
                    "‚ùó ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏¥‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå",
                    event.threadID,
                    event.messageID
                );
            }

            const videoUrl = randomClip.video;
            const videoPath = path.join(downloadsDir, `capcut_${Date.now()}.mp4`);

            // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
            const videoResponse = await axios({
                method: "get",
                url: videoUrl,
                responseType: "stream",
            });

            const writer = fs.createWriteStream(videoPath);
            videoResponse.data.pipe(writer);

            writer.on("finish", () => {
                // ‡∏™‡πà‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                api.sendMessage(
                    {
                        body: `üé¨ ‡∏Ñ‡∏•‡∏¥‡∏õ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å CapCut: ${randomClip.title}`,
                        attachment: fs.createReadStream(videoPath),
                    },
                    event.threadID,
                    () => {
                        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                        fs.unlinkSync(videoPath);
                    }
                );
            });

            writer.on("error", (err) => {
                console.error("‚ùå Error writing video file:", err.message);
                return api.sendMessage(
                    "‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠",
                    event.threadID,
                    event.messageID
                );
            });
        } catch (error) {
            console.error("‚ùå Error fetching CapCut clip:", error.message);
            return api.sendMessage(
                "‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö API",
                event.threadID,
                event.messageID
            );
        }
    },
};
